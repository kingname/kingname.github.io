<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谢乾坤 | Kingname</title>
  
  <subtitle>给时光以生命。</subtitle>
  <link href="https://www.kingname.info/atom.xml" rel="self"/>
  
  <link href="https://www.kingname.info/"/>
  <updated>2024-01-28T08:09:30.395Z</updated>
  <id>https://www.kingname.info/</id>
  
  <author>
    <name>青南</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一日一技：iOS下的开源免费消息推送服务</title>
    <link href="https://www.kingname.info/2024/01/28/bark/"/>
    <id>https://www.kingname.info/2024/01/28/bark/</id>
    <published>2024-01-28T08:08:32.000Z</published>
    <updated>2024-01-28T08:09:30.395Z</updated>
    
    <content type="html"><![CDATA[<p>我们在部署代码到线上以后，可能会需要在一些情况下给自己发报警通知。如果是公司的线上业务，一般会有公司内部的各种通知工具。</p><p>但如果是自己的个人服务，我们应该怎么推送消息呢？有些同学可能使用过叮叮或者飞书机器人，但是这些机器人要发送通知还需要拉个群，稍微有点麻烦。有些同学可能使用的是Telegram，但使用它需要梯子也不太方便。</p><p>如果你的手机是iPhone，那么你可以使用一个开源免费超级轻量级的消息推送服务：<a href="https://bark.day.app/">Bark</a>.</p><span id="more"></span><p>使用Bark只需要简单调用接口即可给自己的iPhone发送推送。它只依赖苹果APNs，及时、稳定、可靠。不会消耗设备的电量， 基于系统推送服务与推送扩展，APP本体并不需要运行。能够使用点对点加密，实现隐私安全，确保即使是Bark的开发者在内的所有人都无法窃取你的隐私。</p><p>使用Bark非常简单，首先在Apple Store搜索<code>Bark</code>并安装，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/IMG_3829.PNG"></p><p>安装完成以后，只有第一次需要打开这个App，从里面复制通知地址，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240128152221.png"></p><p>复制其中的URL，并修改URL里面的中文，就可以实现通知了。例如我的URL是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.day.app/asdfasdfasd/这里改成你自己的推送内容</span><br></pre></td></tr></table></figure><p>把其中的<code>这里改成你自己的推送内容</code>改成我需要推送的内容，例如：</p><p><code>https://api.day.app/asdfasdfasd/除了在未闻Code公众号与kingname.info外的任何地方看到本文均为违规转载欢迎大家举报</code></p><p>可以使用Python或者干脆直接在浏览器访问这个地址，你的手机就会收到通知，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/IMG_3831.PNG"></p><p>推送的消息还可以点开，点开以后可以复制或者分享消息，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/7821706427188_.png"></p><p>如果你推送的消息是一个URL，那么当你点击推送的URL时，可以自动使用浏览器打开这个URL。而且这里的URL还可以是URL Scheme.如果你知道URL Scheme，你就知道它可以打开App的特定功能，以滴答清单为例。可以在这里看到滴答清单的<a href="https://help.dida365.com/tasks/a/6424515668858634240">URL Scheme和使用说明</a></p><p>我现在使用滴答清单的快速添加任务这个功能，当我的线上服务出现bug时，给我发送通知，当我在手机上点击通知以后，自动在我的滴答清单创建一个待办事项。</p><p>创建任务的URL Scheme是：<code>ticktick://x-callback-url/v1/add_task?title=任务文本</code>。因此，我们可以使用如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">&#x27;线上系统发生故障，立刻修复&#x27;</span></span><br><span class="line"></span><br><span class="line">body = &#123;</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: <span class="string">f&#x27;ticktick://x-callback-url/v1/add_task?title=<span class="subst">&#123;quote(message)&#125;</span>&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;body&#x27;</span>: message</span><br><span class="line">&#125;</span><br><span class="line">resp = requests.post(<span class="string">&#x27;https://api.day.app/asdfasdfasdf&#x27;</span>, json=body).json()</span><br><span class="line"><span class="built_in">print</span>(resp)</span><br></pre></td></tr></table></figure><p>运行这段代码以后，手机就会收到消息推送，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/IMG_3833.PNG"></p><p>点开这个通知，就会自动跳转到滴答清单并自动添加任务，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/IMG_3834.PNG"></p><p>通过修改URL Scheme的参数，可以添加到不同的任务清单里面或者实现更多复杂操作。具体可以参阅滴答清单的文档。</p><p>从上面这个例子可以看到，借助Bark，我们可以实现非常多的自动化工作流，从而大大提高工作效率。</p><p><a href="https://github.com/Finb/Bark">在Bark的文档和Github中</a>，你还可以看到如何自定义Bark后端服务器和如何实现消息加密的方法，从而让你彻底掌控Bark的所有消息通知，避免敏感信息泄漏。</p><hr><p>未闻Code Telegram Channel开通了！每天都有各种开发小技巧更新，速来！！</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118220059.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们在部署代码到线上以后，可能会需要在一些情况下给自己发报警通知。如果是公司的线上业务，一般会有公司内部的各种通知工具。&lt;/p&gt;
&lt;p&gt;但如果是自己的个人服务，我们应该怎么推送消息呢？有些同学可能使用过叮叮或者飞书机器人，但是这些机器人要发送通知还需要拉个群，稍微有点麻烦。有些同学可能使用的是Telegram，但使用它需要梯子也不太方便。&lt;/p&gt;
&lt;p&gt;如果你的手机是iPhone，那么你可以使用一个开源免费超级轻量级的消息推送服务：&lt;a href=&quot;https://bark.day.app/&quot;&gt;Bark&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
    <category term="iOS" scheme="https://www.kingname.info/tags/iOS/"/>
    
    <category term="消息推送" scheme="https://www.kingname.info/tags/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：next.js如何正确处理跨域问题？</title>
    <link href="https://www.kingname.info/2024/01/18/nextjs-cors/"/>
    <id>https://www.kingname.info/2024/01/18/nextjs-cors/</id>
    <published>2024-01-18T13:59:10.000Z</published>
    <updated>2024-01-18T14:01:06.197Z</updated>
    
    <content type="html"><![CDATA[<p>我以前一直使用Vue来写前端。去年下半年接手了一个基于React + Next.js的项目，于是顺带学习了一下Next.js。由于Next.js的特点，这个项目的前后端是放在一起的。一开始没什么问题，看了半天文档就上手了。</p><p>上周我们需要在另一个网页项目中，调用这个项目的后端接口，于是就需要处理跨域请求的问题。但我发现按照网上的方法，跨域问题依然存在。这个问题浪费了我不少时间，好在最后终于找到了原因。记录在这里，免得大家跟我一样踩坑。</p><span id="more"></span><p>为了复现这个问题，我们先来创建一个Next.js项目。执行代码创建代码脚手架：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app test_cors</span><br></pre></td></tr></table></figure><p>使用TypeScript，其他选项选择默认，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118205107.png"></p><p>命令执行完成以后，会生成一个<code>test_cors</code>文件夹，在文件夹中创建文件<code>pages/api/test.ts</code>。内容如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next/server&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">runtime</span>: <span class="string">&quot;edge&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">address</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = <span class="keyword">async</span> (<span class="attr">req</span>: <span class="title class_">Request</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> user = (<span class="keyword">await</span> req.<span class="title function_">json</span>()) <span class="keyword">as</span> <span class="title class_">UserInfo</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">                              <span class="attr">msg</span>: <span class="string">`你的名字是<span class="subst">$&#123;user.name&#125;</span>, 今年<span class="subst">$&#123;user.age&#125;</span>岁`</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> handler;</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118210134.png"></p><p>然后运行命令<code>npm run dev</code>。这个后端接口就启动起来了。我们可以使用Postman来进行测试：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118210223.png"></p><p>接下来，我们来写一段HTML代码，触发跨域问题：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>API 请求示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当按钮被点击时执行此函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">sendRequest</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建一个新的 XMLHttpRequest 对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 配置请求类型、URL 以及异步处理</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:3000/api/test&#x27;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置请求头</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// ... 其他请求头设置</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置响应类型</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义请求完成的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 请求成功，处理响应数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;response&#x27;</span>).<span class="property">innerText</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(xhr.<span class="property">response</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 请求失败，处理错误</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;response&#x27;</span>).<span class="property">innerText</span> = <span class="string">&#x27;请求失败: &#x27;</span> + xhr.<span class="property">status</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;青南&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="string">&quot;address&quot;</span>: <span class="string">&quot;上海&quot;</span>&#125;));</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendRequest()&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;response&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接双击打开这个html文件，点击页面上的按扭，就会触发跨域报错，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118210503.png"></p><p>然后，你在网上用关键词搜索<code>next.js 跨域</code>或者<code>next.js cors</code>，一般看到的文章都会让你直接在<code>next.config.js</code>文件中添加响应头，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118210706.png"></p><p>你按照这些文章中写到方法加了配置，重启服务，然后用Postman来测试，你会发现返回的响应头里面确实已经有这几项了，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118210852.png"></p><p>但当你使用HTML页面来测试时，跨域的报错还在。</p><p>你连续打开Google上面10篇讲Next.js跨域的文章，无论是中文博客还是英文博客，甚至你直接使用ChatGPT来问，他们给你的回复肯定都是上面的这个方法。但是无论你怎么测试，跨域问题还在。</p><p>实际上，跨域就是这样配置的。你的配置没有任何问题。问题出现在你的后端代码上，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118211330.png"></p><p>首先你需要是一个POST请求，你才能执行<code>await req.json()</code>。而浏览器在判断能不能跨域时，会首先发送一个<code>OPTIONS</code>请求，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118211446.png"></p><p>这个请求也会走到你的这段后端代码里面。但由于OPTIONS请求没有Body，于是代码运行到<code>await req.json()</code>时，就会报错。于是浏览器认为<code>OPTIONS</code>请求没有返回status 200，因此强行认为你的接口不支持跨域。</p><p>那么解决方法也非常简单，提前判断一下请求方法是不是OPTIONS就可以了：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(req.<span class="property">method</span> === <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118211857.png"></p><p>运行效果如下图所示，跨域成功：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118211927.png"></p><p>这个问题对于资深前端来说，可能不值一提。但对于后端兼职前端的人，或者第一次接触Next.js的人来说，可能是一个深坑，会浪费很多的时间。</p><hr><p>未闻Code Telegram Channel开通了！每天都有各种开发小技巧更新，速来！！</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20240118220059.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我以前一直使用Vue来写前端。去年下半年接手了一个基于React + Next.js的项目，于是顺带学习了一下Next.js。由于Next.js的特点，这个项目的前后端是放在一起的。一开始没什么问题，看了半天文档就上手了。&lt;/p&gt;
&lt;p&gt;上周我们需要在另一个网页项目中，调用这个项目的后端接口，于是就需要处理跨域请求的问题。但我发现按照网上的方法，跨域问题依然存在。这个问题浪费了我不少时间，好在最后终于找到了原因。记录在这里，免得大家跟我一样踩坑。&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.kingname.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Next.js" scheme="https://www.kingname.info/tags/Next-js/"/>
    
  </entry>
  
  <entry>
    <title>再见2023，你好2024</title>
    <link href="https://www.kingname.info/2024/01/01/2023-2024/"/>
    <id>https://www.kingname.info/2024/01/01/2023-2024/</id>
    <published>2024-01-01T06:53:30.000Z</published>
    <updated>2024-01-01T06:54:27.172Z</updated>
    
    <content type="html"><![CDATA[<p>跟风来写个年终总结。</p><p>我记得在2023年元旦，我发了个语音，说我要开始搞播客。结果1年过去了，播客还是没个影子。今年不设这个目标了，免得又拖到明年。</p><p>2023年开头的前5个月，是2022年痛苦的延续。我真的太讨厌字节了。每一天都过得非常痛苦。公众号没有时间写，自己的代码也没有时间写，连学习的时间都没有。每天下班就只想躺下。连躺下都躺不安稳，飞书上面的消息一直在轰炸，动不动就开语音。开你妈个锤子的语音。急急急，急你MLGB，你连一小时都活不下去了吗？我每天在心里骂字节和某些没有边界的同事一百遍。</p><span id="more"></span><p>一月到四月一直在面试，拿了几个offer，也得到过拒绝信。重点讲一下两个吧。第一个是英伟达。这个岗位是全球岗位，所有面试都是英文。在面试之前我心里还有点忐忑，会不会跟面试官无法正常沟通。结果面下来发现我的英语还不错，一共6轮面试，有5轮面试官都是欧美人，都能和他们谈笑风生。感觉应该稳了。结果倒数第二个面试官是印度人，他能听懂我说话，我却完全听不懂他说话。最后他打字给我出了个算法题，半小时做完了以后草草收场。不出意外没有通过。</p><p>第二个是小红书。HR跟我确认offer细节的那天，我跟队友在茂名南路吃火锅，她说这一天是我近一年话最多的一次。整个过程我一直在滔滔不绝地说话。我想我一定是太高兴了。终于可以离开字节了。我是一个I人，平时话其实很少。大多数时候就是埋头吃饭。但这一天，我这就像是无期徒刑突然被通知明天就能出狱了一样。</p><p>不过最后我没有去小红书。当时offer给我的年包比字节上涨了50%。但我问HR，能不能少要点工资，让我不参与公司的大小周。HR说这个没办法。于是我就没有去。所以我最后去了红杉。</p><p>五月底终于逃出了字节。每天能迎着夕阳下班，真是太爽了。重新掌握了生活的主动权。</p><p>红杉作为投资公司，跟互联网公司比起来确实会有一些不一样（有一些不能写的，比较我老板和HR也关注了这个公众号。有空开直播给大家讲讲）。程序员在里面属于非常小众的群体。我们这一层楼有100多个工位，但每天在工位的人不超过10人。大部分投资人每天都在外面出差或者应酬。我要做爬虫，数据分析，后端，前端和基于大模型的应用开发。工作内容很多，可能上并不比字节低多少。但我做起来非常快乐。感觉每天都能学到新的东西，感觉开发的动力和热情又回来了。</p><p>这7个月，我学会了React和TypeScript。在做大模型开发的过程中，也深入研究了RAG的各种高级用法和Prompt工程。算是深度参与大模型相关的开发了。因为工作的需要，还跟很多创业公司的创始人有过深入的沟通。很多新的技术，我都能首先接触到，也算是公司福利吧。</p><p>2023年终于不再限制出行了。五一去了澳门，第一次合法赌博，紧张刺激。玩骰子押大小，竟然用100元赚了3000元。然后在8毛钱一次的老虎机上面输了一半。都说澳门还没有浦东机场大，但为什么走得脚疼呢？</p><p>国庆节去了英国。去之前看小红书，说英国现在又是偷又是抢，治安很差。把我们吓个半死。但到了以后，全程没有遇到任何小偷。英国人自己都边走路边看手机，没道理只抢中国人吧。不过英国的地铁可真脏，布面的椅子都包浆了，黑乎乎的东西干了不知道是呕吐物还是排泄物。英国有最繁琐的餐桌礼仪和最难吃的菜。可能是厨师把做菜的时间全都拿去练习礼仪了。旅行的乐趣就是不期而遇的惊喜和计划之外的偶然。在爱丁堡遇到火车全线取消，差点回不了伦敦。又机缘巧合坐大巴车到了一个计划外的城市转火车。</p><p>看了不少电视剧电视剧，《异人之下》《狂飙》《繁城之下》《三体》《初恋》《新闻女王》《繁花》《流浪地球2》《蜘蛛侠》《长安三万里》《孤注一掷》。还看了五月天的两场演唱会。2023年最喜欢的三个游戏是《王国之泪》《逸剑风云诀》和《大侠立志传》。</p><p>2023年比较喜欢的两个App分别是：memos和钱迹。其中memos相当于开源版的Flomo。我部署在NAS，用来记录平时的灵感。钱迹用来记账。由于现在已经不使用现金了，所有的开销基本都通过微信和支付宝，于是每个月第一天直接把账单导入到钱迹就完成了。整个过程不超过5分钟，没有负担和压力就能实现记账。</p><p>年底买了车，生活边界终于可以扩大了。不过现在思维还没有改过来，有时候说到去哪里，第一个想到的还是坐地铁转共享单车。</p><p>总结一下2023年，应该是<code>苦尽甘来</code>。</p><p>2024年，就不做计划了，感谢各位读者的支持。大家一起加油！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;跟风来写个年终总结。&lt;/p&gt;
&lt;p&gt;我记得在2023年元旦，我发了个语音，说我要开始搞播客。结果1年过去了，播客还是没个影子。今年不设这个目标了，免得又拖到明年。&lt;/p&gt;
&lt;p&gt;2023年开头的前5个月，是2022年痛苦的延续。我真的太讨厌字节了。每一天都过得非常痛苦。公众号没有时间写，自己的代码也没有时间写，连学习的时间都没有。每天下班就只想躺下。连躺下都躺不安稳，飞书上面的消息一直在轰炸，动不动就开语音。开你妈个锤子的语音。急急急，急你MLGB，你连一小时都活不下去了吗？我每天在心里骂字节和某些没有边界的同事一百遍。&lt;/p&gt;</summary>
    
    
    
    
    <category term="年终总结" scheme="https://www.kingname.info/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>一日一测：Bright Data的海外代理测试</title>
    <link href="https://www.kingname.info/2023/12/27/test-bright-data-proxy/"/>
    <id>https://www.kingname.info/2023/12/27/test-bright-data-proxy/</id>
    <published>2023-12-27T14:10:08.000Z</published>
    <updated>2023-12-27T14:11:26.845Z</updated>
    
    <content type="html"><![CDATA[<p>上周的公众号文章提到了Bright Data提供的代理服务。没想到他们的运营同学竟然找上了门，问我能不能帮他们做一个评测。</p><p>我之前使用Bright Data的代理，是因为突然有一天我的HuggingFace爬虫挂了。比较奇怪的是，这个爬虫在我电脑上始终正常运行，但一放到服务器上就请求失败。联想到HuggingFace被封了，而这个爬虫之前一直使用的国内代理供应商，那么原因就很明显了。因为我的电脑是24小时挂着梯子的，所以能够正常访问HuggineFace，但爬虫部署到服务器上面以后，他会自动使用配置好的国内代理。由于国内代理也受到GFW的影响，因此也会出问题。</p><span id="more"></span><p>首先看一下Bright Data他们代理的基本功能，基于数据中心的隧道代理和基于住宅IP的隧道代理还有基于Sim卡的隧道代理。海外代理都是按流量收费的，确实比较贵，如下图所示。数据中心的代理IP，每GB流量收费0.1美元。住宅IP的代理IP，每GB流量收费15美元。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231224133835.png"><br>以数据中心代理为例，我开通的是隧道代理，只需要设置一个固定的地址，爬虫每次请求自动都会使用不同的IP。如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231224150206.png"></p><p>当我们不使用代理时，访问HuggingFace会出现一直没有响应最后超时的情况。当我们在海外服务器上面使用代理访问HuggingFace时，一切正常。</p><p>作为海外代理，Bright Data的隧道IP在海外服务器上面访问HuggingFace是正常的。如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231224151844.png"><br>需要注意的是，这种爬虫代理不是梯子。直接使用它，在国内是无法访问墙外网站的。GFW有一万种方法识别它。所以我们只有使用海外的服务器来运行。这不是Bright Data的问题，所有爬虫代理都是这样的。</p><p>我们今天测试一下代理的稳定性。在测试其他很多代理供应商时，请求量多了经常会出现<code>Caused by ProxyError(&#39;Cannot connect to proxy&#39;...</code>这种报错，还需要我们自己来写重试逻辑。而Bright Data的隧道代理把所有重试都帮我们做了。我们分别在我家的宽带和我的Azure香港服务器上面，测试数据中心IP和住宅IP的代理可用情况。</p><p>测试代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://帐号:密码@brd.superproxy.io:22225&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://帐号:密码@brd.superproxy.io:22225&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(<span class="string">&#x27;https://lumtest.com/myip.json&#x27;</span>, proxies=proxies, timeout=<span class="number">5</span>)</span><br><span class="line">        info = response.json()</span><br><span class="line">        info.update(info.pop(<span class="string">&#x27;geo&#x27;</span>))</span><br><span class="line">        info.update(info.pop(<span class="string">&#x27;asn&#x27;</span>))</span><br><span class="line">        result.append(info)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(result)</span><br><span class="line"><span class="built_in">len</span>(df.index)</span><br></pre></td></tr></table></figure><p>数据中心代理，在我家的网络进行测试：<br><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231224152521.png"><br>测试下来，100次请求，有7次请求超过5秒报错。剩下93次在5秒内完成。这93次成功请求的信息如下：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231224152853.png"></p><p>国家分布如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231224153022.png"></p><p>说明Bright Data的代理确实在全球分布的。</p><p>当我把timeout设置为10秒时，只有2次请求超时。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231224154532.png"></p><p>当我把timeout设置成20秒时，所有请求全部成功。经过多次测试，所有请求最终都能在20秒内完成，不会出现除了超时外的其他报错。说明他们内部做了异常的自动重试机制，能确保你的请求始终能够成功。</p><p>接下来，我在Azure香港服务器上面测试，这次稳定性高了不少，100次请求只有1次超过了5秒。如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231224142638.png"></p><p>把timeout设置成10秒以后，所有请求全部成功。</p><p>接下来，测试住宅IP的使用请求。更换了帐号密码以后，在我家的网络测试效果如下：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231224143650.png"></p><p>有88次请求能够在5秒内完成。12次请求超过5秒报错。注意图中的红色警报并不是错误。是因为家庭代理需要安装Bright Data的证书。如果不使用证书，就需要在Requests的请求中加上<code>verify=False</code>。于是Request就会有这个警告。</p><p>在Azure香港服务区测试住宅IP的效果如下图所示，所有请求全部能够在5秒内完成。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231224144329.png"></p><p>经过这次测试，可以看到Bright Data的稳定性还是不错的。除了代理外，Bright Data还提供爬虫浏览器和验证码破解接口。大家有空可以试一试。扫码注册可以获得免费试用。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231213213401.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上周的公众号文章提到了Bright Data提供的代理服务。没想到他们的运营同学竟然找上了门，问我能不能帮他们做一个评测。&lt;/p&gt;
&lt;p&gt;我之前使用Bright Data的代理，是因为突然有一天我的HuggingFace爬虫挂了。比较奇怪的是，这个爬虫在我电脑上始终正常运行，但一放到服务器上就请求失败。联想到HuggingFace被封了，而这个爬虫之前一直使用的国内代理供应商，那么原因就很明显了。因为我的电脑是24小时挂着梯子的，所以能够正常访问HuggineFace，但爬虫部署到服务器上面以后，他会自动使用配置好的国内代理。由于国内代理也受到GFW的影响，因此也会出问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="爬虫" scheme="https://www.kingname.info/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="代理" scheme="https://www.kingname.info/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：自动提取任意信息的通用爬虫</title>
    <link href="https://www.kingname.info/2023/12/13/really-general-spider/"/>
    <id>https://www.kingname.info/2023/12/13/really-general-spider/</id>
    <published>2023-12-13T13:30:35.000Z</published>
    <updated>2023-12-13T14:03:29.092Z</updated>
    
    <content type="html"><![CDATA[<p>使用过GNE的同学都知道，GNE虽然是通用爬虫，但只是文章类页面的通用爬虫。如果一个页面不是文章页，那么就无能为力了。</p><p>随着ChatGPT引领的大语言模型时代到来，这个问题基本上已经不是问题了。我们先来看一个效果。首先打开Linkedin，随便找一个招聘的岗位，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231213202941.png"></p><p>然后，我们直接使用GPT从这里提取信息：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231213202205.png"></p><span id="more"></span><p>对应的Prompt为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你是一个数据提取小助手，能够从一大段招聘相关的文本中提取有用的信息并以JSON格式返回。</span><br><span class="line"></span><br><span class="line">&#123;经过清洗的网页源代码或者文本&#125;</span><br><span class="line"></span><br><span class="line">请从上面的文本中，提取招聘相关的信息，返回数据格式如下： &#123;&quot;title&quot;: &quot;岗位名称&quot;, &quot;full_time&quot;: &quot;是否为全职&quot;, &quot;employee_num&quot;: &quot;雇员数量&quot;, &quot;level&quot;: &quot;岗位等级&quot;, &quot;skill&quot;: &quot;岗位需要的技能&quot;, &quot;desc&quot;: &quot;岗位描述&quot;, &quot;company&quot;: &quot;公司介绍&quot;, &quot;do&quot;: &quot;岗位具体做什么事情&quot;, &quot;requirement&quot;: &quot;岗位要求&quot;, &quot;goodpoint&quot;: &quot;优先录取条件&quot;&#125;</span><br></pre></td></tr></table></figure><p>在生产环境，我们显然不能使用GPT的网页版。但GPT API的收费比较贵，一般来说，GPT 3.5 Turbo的价格是每1000 Tokens收费0.002美元；GPT 4 Turbo的价格是每1000 Prompt Token收费0.01美元，每1000 Completion Tokens收费0.03美元。</p><p>如果我们直接把网页的源代码整个丢给GPT接口，那么费用是非常昂贵的。这种情况下，我们就应该先对网页源代码进行清洗，移除显然不需要的元素，从而大幅减少Token的占用。</p><p>首先，我们可以先移除一些显然不可能包含关键内容的标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USELESS_TAG = [<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;script&#x27;</span>, <span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;video&#x27;</span>, <span class="string">&#x27;iframe&#x27;</span>, <span class="string">&#x27;source&#x27;</span>, <span class="string">&#x27;picture&#x27;</span>, <span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;blockquote&#x27;</span>,  </span><br><span class="line">               <span class="string">&#x27;footer&#x27;</span>, <span class="string">&#x27;code&#x27;</span>]</span><br></pre></td></tr></table></figure><p>然后，我们可以根据一些元素的class属性，找到另外一批显然不可能包含关键内容的标签，一并移除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">USELESS_ATTR = &#123;  </span><br><span class="line">                <span class="string">&#x27;share&#x27;</span>,  </span><br><span class="line">                <span class="string">&#x27;contribution&#x27;</span>,  </span><br><span class="line">                <span class="string">&#x27;copyright&#x27;</span>,  </span><br><span class="line">                <span class="string">&#x27;copy-right&#x27;</span>,  </span><br><span class="line">                <span class="string">&#x27;disclaimer&#x27;</span>,  </span><br><span class="line">                <span class="string">&#x27;recommend&#x27;</span>,  </span><br><span class="line">                <span class="string">&#x27;related&#x27;</span>,  </span><br><span class="line">                <span class="string">&#x27;footer&#x27;</span>,  </span><br><span class="line">                <span class="string">&#x27;comment&#x27;</span>,  </span><br><span class="line">                <span class="string">&#x27;social&#x27;</span>,  </span><br><span class="line">                <span class="string">&#x27;submeta&#x27;</span>,  </span><br><span class="line">                <span class="string">&#x27;report-infor&#x27;</span>,  </span><br><span class="line">                <span class="string">&quot;auto_modal&quot;</span>  </span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>接下来，对于下面没有text()元素的标签，也可以移除。</p><p>清洗干净以后，我们再使用XPath：<code>normalize-space(string())</code>提取出页面上的文本，把文本发给GPT，就可以正常解析内容了。</p><p>具体清洗的代码，大家可以在<a href="https://github.com/GeneralNewsExtractor/GeneralNewsExtractor/blob/master/gne/utils.py">GNE的源代码</a>可以看到详细的清洗步骤和流程。</p><p>随着MistralAI前两天在推特上通过磁力链接的方式发布模型，我们可以预见到，未来开源大模型功能越来越强大的同时，对机器配置的需求会越来越低。我看有一些大模型的计费方案，已经改成每100万Token几毛钱了。所以未来通用爬虫的解析门槛会越来越低，就像我这篇文章给出的例子，你只需要写几段Prompt，就可以解析出你需要的内容。</p><p>以后做通用爬虫，唯一的技术挑战就是怎么获取到网页源代码。只要有了源代码，剩下的事情交给大模型就好了。</p><p>有一个好的爬虫代理，就能爬取绝大多数的网站。国内的代理供应商，一般隧道代理都是按并发数收费，性能都差不多。但国外的代理，不知道哪根筋不对，全都是按流量收费的。我调研了十多个海外代理供应商，最后综合评测下来亮代理还不错，虽然也是按流量收费，但代理可用性确实非常高。有兴趣的同学可以试一试，他们提供免费试用：<a href="https://get.brightdata.com/8n707n">Proxy - Bright Data</a></p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231213213401.png"></p><p>最后还是我前两年的观点，国内这边的工作环境会越来越恶劣，大家尽快放眼海外，爬虫出海，程序出海，才是未来的方向。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用过GNE的同学都知道，GNE虽然是通用爬虫，但只是文章类页面的通用爬虫。如果一个页面不是文章页，那么就无能为力了。&lt;/p&gt;
&lt;p&gt;随着ChatGPT引领的大语言模型时代到来，这个问题基本上已经不是问题了。我们先来看一个效果。首先打开Linkedin，随便找一个招聘的岗位，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231213202941.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后，我们直接使用GPT从这里提取信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231213202205.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="爬虫" scheme="https://www.kingname.info/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="通用爬虫" scheme="https://www.kingname.info/tags/%E9%80%9A%E7%94%A8%E7%88%AC%E8%99%AB/"/>
    
    <category term="ChatGPT" scheme="https://www.kingname.info/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>GnePro：文章类通用爬虫接口</title>
    <link href="https://www.kingname.info/2023/12/06/GnePro/"/>
    <id>https://www.kingname.info/2023/12/06/GnePro/</id>
    <published>2023-12-06T12:11:21.000Z</published>
    <updated>2023-12-06T13:39:22.337Z</updated>
    
    <content type="html"><![CDATA[<p>GnePro是开源项目<a href="https://github.com/GeneralNewsExtractor/GeneralNewsExtractor">GNE</a>的付费版，能够实现如下功能：</p><ul><li>输入任意文章页面的URL，返回标题&#x2F;作者&#x2F;正文&#x2F;发布时间&#x2F;图片&#x2F;面包屑等一系列信息</li><li>支持异步加载文章页提取</li><li>支持上传自定义的HTML代码提取正文</li><li>支持自动检测网页编码</li><li>支持自动提取网页全部URL</li><li>在8个国家13万个新闻类网站进行测试,准确率高达90%</li></ul><span id="more"></span><h2 id="提取文章正文"><a href="#提取文章正文" class="headerlink" title="提取文章正文"></a>提取文章正文</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://crawler.kingname.info/gne/crawl&quot;</span></span><br><span class="line"></span><br><span class="line">body = &#123;</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.kingname.info/2023/10/17/rubbish/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;js&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">  <span class="string">&quot;charset&quot;</span>: <span class="string">&quot;auto&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;&lt;TOKEN&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, headers=headers, json=body)</span><br><span class="line"></span><br><span class="line">response.json()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回数据如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;拒绝成为这样的程序员&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;publish_time_ts&#x27;</span>: <span class="number">1697545236</span>,</span><br><span class="line"> <span class="string">&#x27;publish_time&#x27;</span>: <span class="string">&#x27;2023-10-17 12:20:36&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;产品经理这两天在跟我抱怨他们公司的一个码农。听的我火冒三丈，差点把跟了我十多年的搪瓷水杯砸烂。 正好在知识星球和微信群里面，有不少同学跟我咨询程序员的职业发展以及怎么应对三十岁危机。 借此机会，我准备用几篇文章来讲讲自己的经验和个人的观点。 有这样一批人，他们在大公司里工作了十几年，年龄一大把，还是一个大头兵。他们被号称经验丰富，但实际上是把一年的工作经验用了十多年，对主流的技术一无所知，他们已经无法适应现在的技术发展。 这些人，每天看起来非常努力，加班加到很晚。产品经理提需求，他们看起来是在非常努力的完成，但完成的效果非常差。产品给他们提修改意见，他们看起来非常积极地去修改。但是改了A问题，出现B问题，改了B问题，出现C问题，修好C问题，A问题又出现了…… 产品经理每次一说产出效果不好，他们马上就会蹦出一大堆技术名词，又是什么业界难题，又是什么行业边界，又是什么技术翘翘板，把A改了，那么从理论上说B就一定有问题。ABC三个需求无法同时满足。言语之间时不时蹦出一些他们昨天刷公众号看到的技术名词。但其实真正的原因是这个需求达到了他们知识的边界，而他们又不愿意学习。他们花3个月做出来的东西，换一个应届生2天就能完成，而且效果好十倍。 这些人，永远把自己当作一个螺丝钉。产品需要什么，自己就做什么。产品不说的，自己坚决不做。产品找过来，一句“你又没有说要这个功能”就把自己的责任推卸干净。 当任务涉及到多个人协作时，这些人把自己的活干完就跑了。从来不会通知一下上下游的同事。等到项目预计上线的前一晚，产品经理来问： “你这个功能做完了吗？” “做完了。” “那调试好了吗？” “我不知道上游的xx和下游的yy他们做完了没有。” 这样的人，我称之为老油条。 老油条特别喜欢装无辜，我都已经这么努力了，你还想怎么样？然后在线上线下宣传自己被公司压榨，被同事排挤，被老员工PUA.但真实的情况是，公司只让他在做这一件事情，他做了三个月。每一次效果不好，其他人都在陪着他分析原因，等他修改。改完以后效果更差。大家给他一次又一次机会，上线时间为他一次又一次推迟，他一次又一次让大家失望。每次还都会找各种理由各种借口。 很多人希望公司能够开除他，但是老板有顾虑，公司有担忧。不敢开除，甚至不敢给他打低绩效。公司，特别是大公司，非常害怕他们在网上发帖。 弱小不一定有理，弱小只是某些老油条的遮羞布。 我觉得现在互联网环境的风气极差。正适合这些老油条肆意妄为。 当一个人在网上发帖说自己被公司开除了，一大批不知道任何内情的网民就会开始攻击公司，觉得这个人太可怜，觉得这个公司太黑毫无人性。特别是当公司是某些著名大厂时，这种攻击更是毫不留情。 民众总是相信弱小者的哭诉，从来听不见强者背后的辩解。知情人为公司解释两句，一大群人站出来要为弱小着主持公道：你是资本的走狗，你是五毛党，你收了多少钱。 正是这样的老油条，导致开除一个人的成本非常高，公司迫于不想惹麻烦，很多时候对于能力差的人选择睁一只眼闭一只眼。现在大环境降本增效，去肥增瘦，能力差的老油条占住了坑位，就会导致真正有能力的人失去一个又一个进入大厂的机会。 几个大厂里面，有很多很多这样的老油条。看这篇文章的你，本来有机会进大厂一展才华，但都是因为这些老油条占住了人头，导致对应的岗位不再招人。其实你比他更加适合这个岗位，但没办法。 公司没有办法开掉这些人，因为现在舆论的风暴太猛。这些风暴始于老油条的装可怜，加强于键盘党的假公道，盛行于跟风人的瞎同情。 没有办法，真的没办法。 每当产品经理跟我讲起他们公司里面的老油条，我都恨不能当场掀桌，但没办法，我吵架超不过，大架也打不过。赢了坐牢，输了住院。 没办法，真的没办法。 只盼大家擦亮眼睛，在同情某些被劝退的互联网员工前，别急着站队，先想想这个人是不是占了本该属于你的岗位。 抱怨归抱怨，希望大家不要成为这样的人。我们下一篇文章，来讲讲我们应该如何成为一个不会被年龄所限制的优秀工程师。&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;clean_content&#x27;</span>: <span class="string">&#x27;&lt;div&gt;&lt;p&gt;产品经理这两天在跟我抱怨他们公司的一个码农。听的我火冒三丈，差点把跟了我十多年的搪瓷水杯砸烂。&lt;/p&gt;&lt;p&gt;正好在知识星球和微信群里面，有不少同学跟我咨询程序员的职业发展以及怎么应对三十岁危机。&lt;/p&gt;&lt;p&gt;借此机会，我准备用几篇文章来讲讲自己的经验和个人的观点。&lt;/p&gt;&lt;p&gt;有这样一批人，他们在大公司里工作了十几年，年龄一大把，还是一个大头兵。他们被号称经验丰富，但实际上是把一年的工作经验用了十多年，对主流的技术一无所知，他们已经无法适应现在的技术发展。&lt;/p&gt;&lt;p&gt;这些人，每天看起来非常努力，加班加到很晚。产品经理提需求，他们看起来是在非常努力的完成，但完成的效果非常差。产品给他们提修改意见，他们看起来非常积极地去修改。但是改了A问题，出现B问题，改了B问题，出现C问题，修好C问题，A问题又出现了……&lt;/p&gt;&lt;p&gt;产品经理每次一说产出效果不好，他们马上就会蹦出一大堆技术名词，又是什么业界难题，又是什么行业边界，又是什么技术翘翘板，把A改了，那么从理论上说B就一定有问题。ABC三个需求无法同时满足。言语之间时不时蹦出一些他们昨天刷公众号看到的技术名词。但其实真正的原因是这个需求达到了他们知识的边界，而他们又不愿意学习。他们花3个月做出来的东西，换一个应届生2天就能完成，而且效果好十倍。&lt;/p&gt;&lt;p&gt;这些人，永远把自己当作一个螺丝钉。产品需要什么，自己就做什么。产品不说的，自己坚决不做。产品找过来，一句“你又没有说要这个功能”就把自己的责任推卸干净。&lt;/p&gt;&lt;p&gt;当任务涉及到多个人协作时，这些人把自己的活干完就跑了。从来不会通知一下上下游的同事。等到项目预计上线的前一晚，产品经理来问：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“你这个功能做完了吗？”&lt;/p&gt;&lt;p&gt;“做完了。”&lt;/p&gt;&lt;p&gt;“那调试好了吗？”&lt;/p&gt;&lt;p&gt;“我不知道上游的xx和下游的yy他们做完了没有。”&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这样的人，我称之为老油条。&lt;/p&gt;&lt;p&gt;老油条特别喜欢装无辜，我都已经这么努力了，你还想怎么样？然后在线上线下宣传自己被公司压榨，被同事排挤，被老员工PUA.但真实的情况是，公司只让他在做这一件事情，他做了三个月。每一次效果不好，其他人都在陪着他分析原因，等他修改。改完以后效果更差。大家给他一次又一次机会，上线时间为他一次又一次推迟，他一次又一次让大家失望。每次还都会找各种理由各种借口。&lt;/p&gt;&lt;p&gt;很多人希望公司能够开除他，但是老板有顾虑，公司有担忧。不敢开除，甚至不敢给他打低绩效。公司，特别是大公司，非常害怕他们在网上发帖。&lt;/p&gt;&lt;p&gt;弱小不一定有理，弱小只是某些老油条的遮羞布。&lt;/p&gt;&lt;p&gt;我觉得现在互联网环境的风气极差。正适合这些老油条肆意妄为。&lt;/p&gt;&lt;p&gt;当一个人在网上发帖说自己被公司开除了，一大批不知道任何内情的网民就会开始攻击公司，觉得这个人太可怜，觉得这个公司太黑毫无人性。特别是当公司是某些著名大厂时，这种攻击更是毫不留情。&lt;/p&gt;&lt;p&gt;民众总是相信弱小者的哭诉，从来听不见强者背后的辩解。知情人为公司解释两句，一大群人站出来要为弱小着主持公道：你是资本的走狗，你是五毛党，你收了多少钱。&lt;/p&gt;&lt;p&gt;正是这样的老油条，导致开除一个人的成本非常高，公司迫于不想惹麻烦，很多时候对于能力差的人选择睁一只眼闭一只眼。现在大环境降本增效，去肥增瘦，能力差的老油条占住了坑位，就会导致真正有能力的人失去一个又一个进入大厂的机会。&lt;/p&gt;&lt;p&gt;几个大厂里面，有很多很多这样的老油条。看这篇文章的你，本来有机会进大厂一展才华，但都是因为这些老油条占住了人头，导致对应的岗位不再招人。其实你比他更加适合这个岗位，但没办法。&lt;/p&gt;&lt;p&gt;公司没有办法开掉这些人，因为现在舆论的风暴太猛。这些风暴始于老油条的装可怜，加强于键盘党的假公道，盛行于跟风人的瞎同情。&lt;/p&gt;&lt;p&gt;没有办法，真的没办法。&lt;/p&gt;&lt;p&gt;每当产品经理跟我讲起他们公司里面的老油条，我都恨不能当场掀桌，但没办法，我吵架超不过，大架也打不过。赢了坐牢，输了住院。&lt;/p&gt;&lt;p&gt;没办法，真的没办法。&lt;/p&gt;&lt;p&gt;只盼大家擦亮眼睛，在同情某些被劝退的互联网员工前，别急着站队，先想想这个人是不是占了本该属于你的岗位。&lt;/p&gt;&lt;p&gt;抱怨归抱怨，希望大家不要成为这样的人。我们下一篇文章，来讲讲我们应该如何成为一个不会被年龄所限制的优秀工程师。&lt;/p&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;content_list&#x27;</span>: [&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;产品经理这两天在跟我抱怨他们公司的一个码农。听的我火冒三丈，差点把跟了我十多年的搪瓷水杯砸烂。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;正好在知识星球和微信群里面，有不少同学跟我咨询程序员的职业发展以及怎么应对三十岁危机。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;借此机会，我准备用几篇文章来讲讲自己的经验和个人的观点。&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;有这样一批人，他们在大公司里工作了十几年，年龄一大把，还是一个大头兵。他们被号称经验丰富，但实际上是把一年的工作经验用了十多年，对主流的技术一无所知，他们已经无法适应现在的技术发展。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;这些人，每天看起来非常努力，加班加到很晚。产品经理提需求，他们看起来是在非常努力的完成，但完成的效果非常差。产品给他们提修改意见，他们看起来非常积极地去修改。但是改了A问题，出现B问题，改了B问题，出现C问题，修好C问题，A问题又出现了……&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;产品经理每次一说产出效果不好，他们马上就会蹦出一大堆技术名词，又是什么业界难题，又是什么行业边界，又是什么技术翘翘板，把A改了，那么从理论上说B就一定有问题。ABC三个需求无法同时满足。言语之间时不时蹦出一些他们昨天刷公众号看到的技术名词。但其实真正的原因是这个需求达到了他们知识的边界，而他们又不愿意学习。他们花3个月做出来的东西，换一个应届生2天就能完成，而且效果好十倍。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;这些人，永远把自己当作一个螺丝钉。产品需要什么，自己就做什么。产品不说的，自己坚决不做。产品找过来，一句“你又没有说要这个功能”就把自己的责任推卸干净。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;当任务涉及到多个人协作时，这些人把自己的活干完就跑了。从来不会通知一下上下游的同事。等到项目预计上线的前一晚，产品经理来问：&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;“你这个功能做完了吗？”&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;“做完了。”&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;“那调试好了吗？”&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;“我不知道上游的xx和下游的yy他们做完了没有。”&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;这样的人，我称之为老油条。&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;老油条特别喜欢装无辜，我都已经这么努力了，你还想怎么样？然后在线上线下宣传自己被公司压榨，被同事排挤，被老员工PUA.但真实的情况是，公司只让他在做这一件事情，他做了三个月。每一次效果不好，其他人都在陪着他分析原因，等他修改。改完以后效果更差。大家给他一次又一次机会，上线时间为他一次又一次推迟，他一次又一次让大家失望。每次还都会找各种理由各种借口。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;很多人希望公司能够开除他，但是老板有顾虑，公司有担忧。不敢开除，甚至不敢给他打低绩效。公司，特别是大公司，非常害怕他们在网上发帖。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;弱小不一定有理，弱小只是某些老油条的遮羞布。&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;我觉得现在互联网环境的风气极差。正适合这些老油条肆意妄为。&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;当一个人在网上发帖说自己被公司开除了，一大批不知道任何内情的网民就会开始攻击公司，觉得这个人太可怜，觉得这个公司太黑毫无人性。特别是当公司是某些著名大厂时，这种攻击更是毫不留情。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;民众总是相信弱小者的哭诉，从来听不见强者背后的辩解。知情人为公司解释两句，一大群人站出来要为弱小着主持公道：你是资本的走狗，你是五毛党，你收了多少钱。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;正是这样的老油条，导致开除一个人的成本非常高，公司迫于不想惹麻烦，很多时候对于能力差的人选择睁一只眼闭一只眼。现在大环境降本增效，去肥增瘦，能力差的老油条占住了坑位，就会导致真正有能力的人失去一个又一个进入大厂的机会。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;几个大厂里面，有很多很多这样的老油条。看这篇文章的你，本来有机会进大厂一展才华，但都是因为这些老油条占住了人头，导致对应的岗位不再招人。其实你比他更加适合这个岗位，但没办法。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;公司没有办法开掉这些人，因为现在舆论的风暴太猛。这些风暴始于老油条的装可怜，加强于键盘党的假公道，盛行于跟风人的瞎同情。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;没有办法，真的没办法。&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;每当产品经理跟我讲起他们公司里面的老油条，我都恨不能当场掀桌，但没办法，我吵架超不过，大架也打不过。赢了坐牢，输了住院。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;没办法，真的没办法。&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;只盼大家擦亮眼睛，在同情某些被劝退的互联网员工前，别急着站队，先想想这个人是不是占了本该属于你的岗位。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;抱怨归抱怨，希望大家不要成为这样的人。我们下一篇文章，来讲讲我们应该如何成为一个不会被年龄所限制的优秀工程师。&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;],</span><br><span class="line"> <span class="string">&#x27;summary&#x27;</span>: <span class="string">&#x27;产品经理这两天在跟我抱怨他们公司的一个码农。听的我火冒三丈，差点把跟了我十多年的搪瓷水杯砸烂。. 正好在知识星球和微信群里面，有不少同学跟我咨询程序员的职业发展以及怎么应对三十岁危机。&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;canonical_url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/10/17/rubbish/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;image_count&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;image_urls&#x27;</span>: [],</span><br><span class="line"> <span class="string">&#x27;image_captions&#x27;</span>: [],</span><br><span class="line"> <span class="string">&#x27;head_meta&#x27;</span>: &#123;<span class="string">&#x27;og:description&#x27;</span>: <span class="string">&#x27;产品经理这两天在跟我抱怨他们公司的一个码农。听的我火冒三丈，差点把跟了我十多年的搪瓷水杯砸烂。 正好在知识星球和微信群里面，有不少同学跟我咨询程序员的职业发展以及怎么应对三十岁危机。 借此机会，我准备用几篇文章来讲讲自己的经验和个人的观点。&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;产品经理这两天在跟我抱怨他们公司的一个码农。听的我火冒三丈，差点把跟了我十多年的搪瓷水杯砸烂。 正好在知识星球和微信群里面，有不少同学跟我咨询程序员的职业发展以及怎么应对三十岁危机。 借此机会，我准备用几篇文章来讲讲自己的经验和个人的观点。&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;og:type&#x27;</span>: <span class="string">&#x27;article&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;viewport&#x27;</span>: <span class="string">&#x27;width=device-width&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;article:tag&#x27;</span>: <span class="string">&#x27;开发经验&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;generator&#x27;</span>: <span class="string">&#x27;Hexo 6.2.0&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;og:site_name&#x27;</span>: <span class="string">&#x27;谢乾坤 | Kingname&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;article:author&#x27;</span>: <span class="string">&#x27;青南&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;theme-color&#x27;</span>: <span class="string">&#x27;#222&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;article:published_time&#x27;</span>: <span class="string">&#x27;2023-10-17T12:20:36.000Z&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;og:locale&#x27;</span>: <span class="string">&#x27;zh_CN&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;og:url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/10/17/rubbish/index.html&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;og:title&#x27;</span>: <span class="string">&#x27;拒绝成为这样的程序员&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;article:modified_time&#x27;</span>: <span class="string">&#x27;2023-10-17T12:21:20.216Z&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;twitter:card&#x27;</span>: <span class="string">&#x27;summary&#x27;</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;author&#x27;</span>: [],</span><br><span class="line"> <span class="string">&#x27;timezone&#x27;</span>: <span class="string">&#x27;UTC8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/10/17/rubbish/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;amp_url&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;breadcrumb&#x27;</span>: []&#125;</span><br></pre></td></tr></table></figure><h2 id="JS渲染页面"><a href="#JS渲染页面" class="headerlink" title="JS渲染页面"></a>JS渲染页面</h2><p> 如果使用上面的设置抓取网页,返回如下报错信息:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    <span class="string">&quot;success&quot;</span>: false,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;解析正文失败！&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 那么,只需要把参数中的<code>&quot;js&quot;: false</code>改为<code>&quot;js&quot;: true</code>即可.例如:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://crawler.kingname.info/gne/crawl&quot;</span></span><br><span class="line"></span><br><span class="line">body = &#123;</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://mp.weixin.qq.com/s/VObN8Ve8piv_I13fKbWhww&quot;</span>,</span><br><span class="line">  <span class="string">&quot;js&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">  <span class="string">&quot;charset&quot;</span>: <span class="string">&quot;auto&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;&lt;TOKEN&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, headers=headers, json=body)</span><br><span class="line"></span><br><span class="line">response.json()</span><br></pre></td></tr></table></figure><p> 开启JS渲染以后,速度会比较慢.因此建议先使用普通模式,解析失败再使用JS渲染模式.</p><h2 id="抓取页面链接"><a href="#抓取页面链接" class="headerlink" title="抓取页面链接"></a>抓取页面链接</h2> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://crawler.kingname.info/gne/crawl&quot;</span></span><br><span class="line"></span><br><span class="line">body = &#123;</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.kingname.info/archives/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;js&quot;</span>: false,</span><br><span class="line">  <span class="string">&quot;charset&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">  <span class="string">&quot;target&quot;</span>: <span class="string">&quot;link&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;&lt;TOKEN&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, headers=headers, json=body)</span><br><span class="line"></span><br><span class="line">response.json()</span><br></pre></td></tr></table></figure><p> 返回结果如下:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/&#x27;</span>, <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;谢乾坤 | Kingname&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/archives/&#x27;</span>, <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;归档&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/tags&#x27;</span>, <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;标签&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/mp&#x27;</span>, <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;公众号&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/about&#x27;</span>, <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;关于&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://github.com/kingname&#x27;</span>, <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;GitHub&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/11/29/jwt/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;一日一技：分布式系统的低成本权限校验机制&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/11/15/git-worktree/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;一日一技：如何同时在多个分支写代码？&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/11/14/typeddict/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;一日一技：警告但不禁止，遗留代码的优化策略&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/11/11/gpts/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;老板让我加班怎么办？GPTs创建机器人实战&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/11/11/python-run-other-code/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;一日一技：如何安全运行别人上传的Python代码？&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/10/28/parse-json-object/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;一日一技：爬虫如何解析JavaScript Object？&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/10/28/json-in-html/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;一日一技：HTML里面提取的JSON怎么解析不了？&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/10/17/curl-cffi/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;一日一技：Requests被网站识别怎么办？&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/10/17/rubbish/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;拒绝成为这样的程序员&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/2023/09/22/json-to-obj/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;一日一技：JSON如何快速转成对象？&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/archives/page/2/&#x27;</span>, <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;2&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.kingname.info/archives/page/23/&#x27;</span>, <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;23&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://hexo.io/&#x27;</span>, <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;Hexo&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://theme-next.js.org/muse/&#x27;</span>, <span class="string">&#x27;anchor&#x27;</span>: <span class="string">&#x27;NexT.Muse&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="自己上传HTML解析"><a href="#自己上传HTML解析" class="headerlink" title="自己上传HTML解析"></a>自己上传HTML解析</h2><h3 id="上传完整HTML"><a href="#上传完整HTML" class="headerlink" title="上传完整HTML"></a>上传完整HTML</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/Users/kingname/Downloads/okx.html&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    html = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">body = &#123;</span><br><span class="line">    <span class="string">&#x27;html&#x27;</span>: html,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.okx.com/learn/curve-finance-guide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;fetch_time&#x27;</span>: <span class="built_in">int</span>(time.time()),</span><br><span class="line">    <span class="string">&#x27;charset&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>&#125;</span><br><span class="line">resp = requests.post(<span class="string">&#x27;https://crawler.kingname.info/gne/crawl_html&#x27;</span>,</span><br><span class="line">                     json=body,</span><br><span class="line">                     headers=&#123;<span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;&lt;TOKEN&gt;&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(resp.json())</span><br></pre></td></tr></table></figure><p> 请求参数中的<code>url</code>字段不能省略,因为有一些网站的图片和链接使用的是相对URL,此时需要使用URL字段跟这些相对URL拼接出完整的URL.这个字段的值只需要保证域名正确就可以了.例如值填写成<code>https://www.kinganme.info/1/2/3</code>也没有问题.</p><p> 请求参数中的<code>fetch_time</code>也不能省略,因为有一些文章的发布时间是类似于<code>2小时前</code>,<code>30分钟前</code>这种写法.需要根据这个字段的值,推导出正确的文章发布时间.</p><p> 返回结果如下:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Exploring Curve Finance: A comprehensive guide&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;publish_time_ts&#x27;</span>: <span class="number">1686801600</span>,</span><br><span class="line"><span class="string">&#x27;publish_time&#x27;</span>: <span class="string">&#x27;2023-06-15 04:00:00&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;Ethereum’s network is the home to a wide range of unique projects. Ever since it created the ERC-20 token model, thousands of tokens have been launched. In time, new products have emerged as well, such as dApps, decentralized finance (DeFi) protocols and decentralized exchanges (DEXes). One example of a DEX is Curve Finance, which is Ethereum’s go-to DEX for stablecoin trading. It may not be the largest DEX in Ethereum’s ecosystem, but Curve has certainly left a mark. This guide will explore Curve and explain what it is, how it works and what it has to offer. We will also address the project’s token, CRV, and potential risks of the project. What is Curve Finance? Curve Finance is a decentralized exchange that runs on Ethereum’s network. It specifically functions as a decentralized liquidity pool for stablecoin trading. Unlike other exchanges, it does not use an order book. Instead, it relies on an Automated Market Maker (AMM) model for matching liquidity. Curve was founded by Michael Egorov, who previously co-founded the crypto infrastructure protocol NuCypher, where he also served as CTO. He also founded LoanCoin — a decentralized loans networ. Before getting into crypto, he studied at the Moscow Institute of Physics and Technology and the Swinburne University of Technology. Curve Finance is very easy to use. All that you need is an Ethereum wallet. Once you have this, you can start swapping different stablecoins at very low trading fees. While Uniswap is Ethereum’s biggest DEX, Curve Finance is still the biggest for stablecoins. What is an AMM? An Automated Market Maker (AMM) is a DEX protocol used for matching liquidity. It’s used by Curve Finance, as well as many other DEXes. Its role is to replace an order book and use a pricing algorithm to price assets. That way, digital assets can be traded using liquidity pools, instead of matching buyers and sellers. How does Curve Finance work? Curve is a fully decentralized and permissionless protocol, run by the Curve DAO. Curve DAO token CRV is used as its native cryptocurrency. Thanks to its decentralized nature, anyone can provide liquidity to one or more pools. Smart contracts are utilized to carry out any swap. Smart contracts contain liquidity granted to the DEX by its community. In return, community members receive rewards for offering their tokens. Meanwhile, the tokens are used to match orders submitted to the exchange. By adopting this method, Curve users are able to swap two or more tokens. These swaps can include paired stablecoins or wrapped tokens with the underlying collateral. Stable liquidity pools Curve Finance was launched in 2020 when the decentralized finance sector initially blew up. It emerged with the intention of creating an AMM exchange with low fees and efficient fiat savings accounts. The DEX focuses on stablecoins, which allows investors to avoid some of the more volatile aspects of the crypto industry. Meanwhile, it still allows investors to earn high-interest rates by using lending protocols. Incentives for liquidity providers Since Curve Finance’s model cannot function without liquidity providers, attracting as many as possible is imperative. This is why Curve offers various incentives to its users. For example, Curve Finance offers lower transaction fees in comparison to its competitors such as Uniswap. They also allow users to earn rewards from outside of Curve. This is possible thanks to so-called interoperable tokens. For example, if DAI is lent out on Compound Finance. DAI tokens are then exchanged for cDAI. Curve users can use cDAI in Curve’s own liquidity pools. Curve is also integrated with other projects, such as Yearsn and Synthetix. This allows liquidity providers to maximize their return on investment, which in turn, encourages users to return to the platform and provide liquidity to Curve. But that’s is not all, as there are more ways to profit from providing liquidity on this platform. These include: Trading fees: Liquidity providers earn profits from fees paid by the platform’s traders; High APY: Annual Percentage Yields (APY) for stablecoin deposits on Curve can go quite high; Yield Farming : Any funds deposited into LPs that end up not being utilized are used in other DeFi protocols for extra income; veCRV token: By locking up Curve’s native CRV token, users receive veCRV. After that, veCRV holders can use the tokens to boost their deposit APY even further; Boosted pools: Some Curve Finance pools offer further incentives for additional liquidity. This may include high yields for LPs, and Curve is known for yield farming of stablecoins. With this at their disposal, Curve liquidity providers can mix and match these income streams how they see fit. It’s in their interest to earn as much as possible in exchange for the use of their tokens. Curve Finance (CRV) token Back in August 2020, Curve Finance began seeking full decentralization through decentralized governance. In order to achieve this, they launched a Decentralized Autonomous Organization, or DAO, for short. Like other DAOs, Curve Finance introduced their native token, CRV. Following the launch of CRV, Curve released a distribution schedule that is expected to be completed by 2026. The total supply of 3.03b is distributed as such: 62% to community liquidity providers 30% to shareholders (team and investors) with 2-4 years vesting 3% to employees with 2 years vesting Curve DAO token, CRV, grants its holders with voting rights, allowing them to vote on various proposals. They can also make proposals themselves, and let the rest of the community vote on it. Anyone with CRV tokens that are vote-locked can propose updates to the protocol. This can include changing the fees, creating new LPs, adjusting rewards for yield farming and more. The CRV token can be purchased or earned from yield farming after the user deposits assets into LPs. As of April 2023, the token has a circulating supply of 807.69 million and its total supply is 1.9 billion. CRV’s trading volume sits at around $50 million and its max supply is capped at 3.3 million. CRV has quite a few use cases within the Curve Finance ecosystem. Apart from being used as a governance token, it also offers LP rewards and boosts yields. On top of that, it is also used for token burns. Burns are generally used to reduce the circulating supply. They are performed by locking up tokens into a separate, one-way smart contract. The risks of Curve Finance While Curve Finance definitely has plenty of advantages, it is also worth addressing its risks. Fortunately, there are not many of them. The project has been audited by Trail of Bits twice and once by Quantstamp. Of course, this doesn’t mean that the project is risk-free, but it’s a good start. One of the biggest risks that Curve faces is its reliance on other DEFI protocols. As the majority of Curve’s liquidity pools are also supplied by other protocols, to generate additional income. If one of those protocols were to face financial difficulties, there could be a chain reaction that would affect many of them. Does Curve Finance have a future? Curve Finance is one of the most popular AMMs on Ethereum. It facilitates high-volume trades of stablecoins and wrapped cryptocurrencies. It offers tight spreads and low slippage, and numerous DeFi protocols rely heavily on it. As such, it is at the core of Ethereum’s DeFi sector. All of this highly suggests that the project does have a future. There are still risks involved with it, as there are with every crypto project. However, Curve Finance’s chances of remaining popular and operational are still quite good. FAQs What is Curve in crypto? Curve is a decentralized exchange and an AMM protocol that facilitates stablecoin swaps. It also supports swaps of wrapped cryptos. On top of that, it is integrated with a number of other projects in Ethereum’s DeFi sector. How safe is Curve Finance? Curve Finance is as safe as any established cryptocurrency. When dealing with crypto, there are always risks involved. However, the protocol has been audited and is deemed to be a safe platform to use. Who founded Curve Finance? Curve was founded by Michael Egorov. Before founding it, Egorov worked on several other projects in the crypto industry. Is Curve fee free? Curve does not offer zero fees. However, its fees are still quite low in comparison to other similar projects. Is Curve a real bank? Curve Finance is not a bank, but rather a DEX that offers yield farming. Its primary role is to offer stablecoin and wrapped crypto swaps. However, by becoming a liquidity pool provider, you can earn passive income from your dealings with the project.&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;clean_content&#x27;</span>: <span class="string">&#x27;&lt;div&gt;&lt;p&gt;Ethereum’s network is the home to a wide range of unique projects. Ever since it created the ERC-20 token model, thousands of tokens have been launched. In time, new products have emerged as well, such as dApps, decentralized finance (DeFi) protocols and decentralized exchanges (DEXes). &lt;/p&gt;&lt;p&gt;One example of a DEX is Curve Finance, which is Ethereum’s go-to DEX for stablecoin trading. It may not be the largest DEX in Ethereum’s ecosystem, but Curve has certainly left a mark. This guide will explore Curve and explain what it is, how it works and what it has to offer. We will also address the project’s token, CRV, and potential risks of the project.&lt;/p&gt;&lt;h2&gt;What is Curve Finance?&lt;/h2&gt;&lt;p&gt;Curve Finance is a decentralized exchange that runs on Ethereum’s network. It specifically functions as a decentralized liquidity pool for stablecoin trading. Unlike other exchanges, it does not use an order book. Instead, it relies on an Automated Market Maker (AMM) model for matching liquidity. &lt;/p&gt;&lt;p&gt;Curve was founded by Michael Egorov, who previously co-founded the crypto infrastructure protocol NuCypher, where he also served as CTO. He also founded LoanCoin — a decentralized loans networ. Before getting into crypto, he studied at the Moscow Institute of Physics and Technology and the Swinburne University of Technology.&lt;/p&gt;&lt;p&gt;Curve Finance is very easy to use. All that you need is an Ethereum wallet. Once you have this, you can start swapping different stablecoins at very low trading fees. While Uniswap is Ethereum’s biggest DEX, Curve Finance is still the biggest for stablecoins.&lt;/p&gt;&lt;h2&gt;What is an AMM?&lt;/h2&gt;&lt;p&gt;An Automated Market Maker (AMM) is a DEX protocol used for matching liquidity. It’s used by Curve Finance, as well as many other DEXes. Its role is to replace an order book and use a pricing algorithm to price assets. That way, digital assets can be traded using liquidity pools, instead of matching buyers and sellers. &lt;/p&gt;&lt;h2&gt;How does Curve Finance work?&lt;/h2&gt;&lt;p&gt;Curve is a fully decentralized and permissionless protocol, run by the Curve DAO. Curve DAO token CRV is used as its native cryptocurrency. Thanks to its decentralized nature, anyone can provide liquidity to one or more pools. Smart contracts are utilized to carry out any swap.&lt;/p&gt;&lt;p&gt;Smart contracts contain liquidity granted to the DEX by its community. In return, community members receive rewards for offering their tokens. Meanwhile, the tokens are used to match orders submitted to the exchange. By adopting this method, Curve users are able to swap two or more tokens. These swaps can include paired stablecoins or wrapped tokens with the underlying collateral. &lt;/p&gt;&lt;h2&gt;Stable liquidity pools&lt;/h2&gt;&lt;p&gt;Curve Finance was launched in 2020 when the decentralized finance sector initially blew up. It emerged with the intention of creating an AMM exchange with low fees and efficient fiat savings accounts. The DEX focuses on stablecoins, which allows investors to avoid some of the more volatile aspects of the crypto industry. Meanwhile, it still allows investors to earn high-interest rates by using lending protocols. &lt;/p&gt;&lt;h2&gt;Incentives for liquidity providers&lt;/h2&gt;&lt;p&gt;Since Curve Finance’s model cannot function without liquidity providers, attracting as many as possible is imperative. This is why Curve offers various incentives to its users. For example, Curve Finance offers lower transaction fees in comparison to its competitors such as Uniswap. They also allow users to earn rewards from outside of Curve. This is possible thanks to so-called interoperable tokens. For example, if DAI is lent out on Compound Finance. DAI tokens are then exchanged for cDAI. Curve users can use cDAI in Curve’s own liquidity pools. &lt;/p&gt;&lt;p&gt;Curve is also integrated with other projects, such as Yearsn and Synthetix. This allows liquidity providers to maximize their return on investment, which in turn, encourages users to return to the platform and provide liquidity to Curve. &lt;/p&gt;&lt;p&gt;But that’s is not all, as there are more ways to profit from providing liquidity on this platform. These include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Trading fees: Liquidity providers earn profits from fees paid by the platform’s traders;&lt;/li&gt;&lt;li&gt;High APY: Annual Percentage Yields (APY) for stablecoin deposits on Curve can go quite high;&lt;/li&gt;&lt;li&gt;Yield Farming : Any funds deposited into LPs that end up not being utilized are used in other DeFi protocols for extra income; &lt;/li&gt;&lt;li&gt;veCRV token: By locking up Curve’s native CRV token, users receive veCRV. After that, veCRV holders can use the tokens to boost their deposit APY even further;&lt;/li&gt;&lt;li&gt;Boosted pools: Some Curve Finance pools offer further incentives for additional liquidity. This may include high yields for LPs, and Curve is known for yield farming of stablecoins.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With this at their disposal, Curve liquidity providers can mix and match these income streams how they see fit. It’s in their interest to earn as much as possible in exchange for the use of their tokens.&lt;/p&gt;&lt;h2&gt;Curve Finance (CRV) token&lt;/h2&gt;&lt;p&gt;Back in August 2020, Curve Finance began seeking full decentralization through decentralized governance. In order to achieve this, they launched a Decentralized Autonomous Organization, or DAO, for short. Like other DAOs, Curve Finance introduced their native token, CRV.&lt;/p&gt;&lt;p&gt;Following the launch of CRV, Curve released a distribution schedule that is expected to be completed by 2026. &lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://static.okx.com/cdn/assets/plugins/contentful/4nqoo8goeymu/77FafUZE1sjddle2cvbVwT/a02397f818dac7686303ee8da38afad0/Crv.jpg&quot; /&gt;&lt;/figure&gt;&lt;p&gt;The total supply of 3.03b is distributed as such:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;62% to community liquidity providers&lt;/li&gt;&lt;li&gt;30% to shareholders (team and investors) with 2-4 years vesting&lt;/li&gt;&lt;li&gt;3% to employees with 2 years vesting&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Curve DAO token, CRV, grants its holders with voting rights, allowing them to vote on various proposals. They can also make proposals themselves, and let the rest of the community vote on it. Anyone with CRV tokens that are vote-locked can propose updates to the protocol. This can include changing the fees, creating new LPs, adjusting rewards for yield farming and more.&lt;/p&gt;&lt;p&gt;The CRV token can be purchased or earned from yield farming after the user deposits assets into LPs. &lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://static.okx.com/cdn/assets/plugins/contentful/4nqoo8goeymu/lWtnJYgt2NuvZ0c841C4k/07de91ea5e7a530dbc006f97dc5a213b/Curve.jpg&quot; /&gt;&lt;/figure&gt;&lt;p&gt;As of April 2023, the token has a circulating supply of 807.69 million and its total supply is 1.9 billion. CRV’s trading volume sits at around $50 million and its max supply is capped at 3.3 million.&lt;/p&gt;&lt;p&gt;CRV has quite a few use cases within the Curve Finance ecosystem. Apart from being used as a governance token, it also offers LP rewards and boosts yields. On top of that, it is also used for token burns. Burns are generally used to reduce the circulating supply. They are performed by locking up tokens into a separate, one-way smart contract. &lt;/p&gt;&lt;h2&gt;The risks of Curve Finance&lt;/h2&gt;&lt;p&gt;While Curve Finance definitely has plenty of advantages, it is also worth addressing its risks. Fortunately, there are not many of them. The project has been audited by Trail of Bits twice and once by Quantstamp. Of course, this doesn’t mean that the project is risk-free, but it’s a good start. &lt;/p&gt;&lt;p&gt;One of the biggest risks that Curve faces is its reliance on other DEFI protocols. As the majority of Curve’s liquidity pools are also supplied by other protocols, to generate additional income. If one of those protocols were to face financial difficulties, there could be a chain reaction that would affect many of them.&lt;/p&gt;&lt;h2&gt;Does Curve Finance have a future?&lt;/h2&gt;&lt;p&gt;Curve Finance is one of the most popular AMMs on Ethereum. It facilitates high-volume trades of stablecoins and wrapped cryptocurrencies. It offers tight spreads and low slippage, and numerous DeFi protocols rely heavily on it. As such, it is at the core of Ethereum’s DeFi sector.&lt;/p&gt;&lt;p&gt;All of this highly suggests that the project does have a future. There are still risks involved with it, as there are with every crypto project. However, Curve Finance’s chances of remaining popular and operational are still quite good.&lt;/p&gt;&lt;h2&gt;FAQs&lt;/h2&gt;&lt;h2&gt;What is Curve in crypto?&lt;/h2&gt;&lt;p&gt;Curve is a decentralized exchange and an AMM protocol that facilitates stablecoin swaps. It also supports swaps of wrapped cryptos. On top of that, it is integrated with a number of other projects in Ethereum’s DeFi sector.&lt;/p&gt;&lt;h2&gt;How safe is Curve Finance?&lt;/h2&gt;&lt;p&gt;Curve Finance is as safe as any established cryptocurrency. When dealing with crypto, there are always risks involved. However, the protocol has been audited and is deemed to be a safe platform to use.&lt;/p&gt;&lt;h2&gt;Who founded Curve Finance?&lt;/h2&gt;&lt;p&gt;Curve was founded by Michael Egorov. Before founding it, Egorov worked on several other projects in the crypto industry. &lt;/p&gt;&lt;h2&gt;Is Curve fee free?&lt;/h2&gt;&lt;p&gt;Curve does not offer zero fees. However, its fees are still quite low in comparison to other similar projects.&lt;/p&gt;&lt;h2&gt;Is Curve a real bank?&lt;/h2&gt;&lt;p&gt;Curve Finance is not a bank, but rather a DEX that offers yield farming. Its primary role is to offer stablecoin and wrapped crypto swaps. However, by becoming a liquidity pool provider, you can earn passive income from your dealings with the project.&lt;/p&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;content_list&#x27;</span>: [&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Ethereum’s network is the home to a wide range of unique projects. Ever since it created the ERC-20 token model, thousands of tokens have been launched. In time, new products have emerged as well, such as dApps, decentralized finance (DeFi) protocols and decentralized exchanges (DEXes).&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;One example of a DEX is Curve Finance, which is Ethereum’s go-to DEX for stablecoin trading. It may not be the largest DEX in Ethereum’s ecosystem, but Curve has certainly left a mark. This guide will explore Curve and explain what it is, how it works and what it has to offer. We will also address the project’s token, CRV, and potential risks of the project.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;What is Curve Finance?&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve Finance is a decentralized exchange that runs on Ethereum’s network. It specifically functions as a decentralized liquidity pool for stablecoin trading. Unlike other exchanges, it does not use an order book. Instead, it relies on an Automated Market Maker (AMM) model for matching liquidity.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve was founded by Michael Egorov, who previously co-founded the crypto infrastructure protocol NuCypher, where he also served as CTO. He also founded LoanCoin — a decentralized loans networ. Before getting into crypto, he studied at the Moscow Institute of Physics and Technology and the Swinburne University of Technology.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve Finance is very easy to use. All that you need is an Ethereum wallet. Once you have this, you can start swapping different stablecoins at very low trading fees. While Uniswap is Ethereum’s biggest DEX, Curve Finance is still the biggest for stablecoins.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;What is an AMM?&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;An Automated Market Maker (AMM) is a DEX protocol used for matching liquidity. It’s used by Curve Finance, as well as many other DEXes. Its role is to replace an order book and use a pricing algorithm to price assets. That way, digital assets can be traded using liquidity pools, instead of matching buyers and sellers.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;How does Curve Finance work?&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve is a fully decentralized and permissionless protocol, run by the Curve DAO. Curve DAO token CRV is used as its native cryptocurrency. Thanks to its decentralized nature, anyone can provide liquidity to one or more pools. Smart contracts are utilized to carry out any swap.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Smart contracts contain liquidity granted to the DEX by its community. In return, community members receive rewards for offering their tokens. Meanwhile, the tokens are used to match orders submitted to the exchange. By adopting this method, Curve users are able to swap two or more tokens. These swaps can include paired stablecoins or wrapped tokens with the underlying collateral.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Stable liquidity pools&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve Finance was launched in 2020 when the decentralized finance sector initially blew up. It emerged with the intention of creating an AMM exchange with low fees and efficient fiat savings accounts. The DEX focuses on stablecoins, which allows investors to avoid some of the more volatile aspects of the crypto industry. Meanwhile, it still allows investors to earn high-interest rates by using lending protocols.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Incentives for liquidity providers&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Since Curve Finance’s model cannot function without liquidity providers, attracting as many as possible is imperative. This is why Curve offers various incentives to its users. For example, Curve Finance offers lower transaction fees in comparison to its competitors such as Uniswap. They also allow users to earn rewards from outside of Curve. This is possible thanks to so-called interoperable tokens. For example, if DAI is lent out on Compound Finance. DAI tokens are then exchanged for cDAI. Curve users can use cDAI in Curve’s own liquidity pools.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve is also integrated with other projects, such as Yearsn and Synthetix. This allows liquidity providers to maximize their return on investment, which in turn, encourages users to return to the platform and provide liquidity to Curve.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;But that’s is not all, as there are more ways to profit from providing liquidity on this platform. These include:&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Trading fees: Liquidity providers earn profits from fees paid by the platform’s traders;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;High APY: Annual Percentage Yields (APY) for stablecoin deposits on Curve can go quite high;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Yield Farming : Any funds deposited into LPs that end up not being utilized are used in other DeFi protocols for extra income;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;veCRV token: By locking up Curve’s native CRV token, users receive veCRV. After that, veCRV holders can use the tokens to boost their deposit APY even further;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Boosted pools: Some Curve Finance pools offer further incentives for additional liquidity. This may include high yields for LPs, and Curve is known for yield farming of stablecoins.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;With this at their disposal, Curve liquidity providers can mix and match these income streams how they see fit. It’s in their interest to earn as much as possible in exchange for the use of their tokens.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve Finance (CRV) token&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Back in August 2020, Curve Finance began seeking full decentralization through decentralized governance. In order to achieve this, they launched a Decentralized Autonomous Organization, or DAO, for short. Like other DAOs, Curve Finance introduced their native token, CRV.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Following the launch of CRV, Curve released a distribution schedule that is expected to be completed by 2026.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;https://static.okx.com/cdn/assets/plugins/contentful/4nqoo8goeymu/77FafUZE1sjddle2cvbVwT/a02397f818dac7686303ee8da38afad0/Crv.jpg&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;The total supply of 3.03b is distributed as such:&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;62% to community liquidity providers&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;30% to shareholders (team and investors) with 2-4 years vesting&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;3% to employees with 2 years vesting&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve DAO token, CRV, grants its holders with voting rights, allowing them to vote on various proposals. They can also make proposals themselves, and let the rest of the community vote on it. Anyone with CRV tokens that are vote-locked can propose updates to the protocol. This can include changing the fees, creating new LPs, adjusting rewards for yield farming and more.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;The CRV token can be purchased or earned from yield farming after the user deposits assets into LPs.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;https://static.okx.com/cdn/assets/plugins/contentful/4nqoo8goeymu/lWtnJYgt2NuvZ0c841C4k/07de91ea5e7a530dbc006f97dc5a213b/Curve.jpg&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;As of April 2023, the token has a circulating supply of 807.69 million and its total supply is 1.9 billion. CRV’s trading volume sits at around $50 million and its max supply is capped at 3.3 million.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;CRV has quite a few use cases within the Curve Finance ecosystem. Apart from being used as a governance token, it also offers LP rewards and boosts yields. On top of that, it is also used for token burns. Burns are generally used to reduce the circulating supply. They are performed by locking up tokens into a separate, one-way smart contract.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;The risks of Curve Finance&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;While Curve Finance definitely has plenty of advantages, it is also worth addressing its risks. Fortunately, there are not many of them. The project has been audited by Trail of Bits twice and once by Quantstamp. Of course, this doesn’t mean that the project is risk-free, but it’s a good start.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;One of the biggest risks that Curve faces is its reliance on other DEFI protocols. As the majority of Curve’s liquidity pools are also supplied by other protocols, to generate additional income. If one of those protocols were to face financial difficulties, there could be a chain reaction that would affect many of them.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Does Curve Finance have a future?&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve Finance is one of the most popular AMMs on Ethereum. It facilitates high-volume trades of stablecoins and wrapped cryptocurrencies. It offers tight spreads and low slippage, and numerous DeFi protocols rely heavily on it. As such, it is at the core of Ethereum’s DeFi sector.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;All of this highly suggests that the project does have a future. There are still risks involved with it, as there are with every crypto project. However, Curve Finance’s chances of remaining popular and operational are still quite good.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;FAQs&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;What is Curve in crypto?&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve is a decentralized exchange and an AMM protocol that facilitates stablecoin swaps. It also supports swaps of wrapped cryptos. On top of that, it is integrated with a number of other projects in Ethereum’s DeFi sector.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;How safe is Curve Finance?&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve Finance is as safe as any established cryptocurrency. When dealing with crypto, there are always risks involved. However, the protocol has been audited and is deemed to be a safe platform to use.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Who founded Curve Finance?&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve was founded by Michael Egorov. Before founding it, Egorov worked on several other projects in the crypto industry.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Is Curve fee free?&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve does not offer zero fees. However, its fees are still quite low in comparison to other similar projects.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Is Curve a real bank?&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Curve Finance is not a bank, but rather a DEX that offers yield farming. Its primary role is to offer stablecoin and wrapped crypto swaps. However, by becoming a liquidity pool provider, you can earn passive income from your dealings with the project.&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;caption&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;],</span><br><span class="line"><span class="string">&#x27;summary&#x27;</span>: <span class="string">&#x27;Ethereum’s network is the home to a wide range of unique projects. Ever since it created the ERC-20 token model, thousands of tokens have been launched. In time, new products have emerged as well, such as dApps, decentralized finance (DeFi) protocols and decentralized exchanges (DEXes). One example of a...&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;canonical_url&#x27;</span>: <span class="string">&#x27;https://www.okx.com/learn/curve-finance-guide&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;image_count&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">&#x27;image_urls&#x27;</span>: [<span class="string">&#x27;https://static.okx.com/cdn/assets/plugins/contentful/4nqoo8goeymu/77FafUZE1sjddle2cvbVwT/a02397f818dac7686303ee8da38afad0/Crv.jpg&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;https://static.okx.com/cdn/assets/plugins/contentful/4nqoo8goeymu/lWtnJYgt2NuvZ0c841C4k/07de91ea5e7a530dbc006f97dc5a213b/Curve.jpg&#x27;</span>],</span><br><span class="line"><span class="string">&#x27;image_captions&#x27;</span>: [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>],</span><br><span class="line"><span class="string">&#x27;head_meta&#x27;</span>: &#123;<span class="string">&#x27;og:type&#x27;</span>: <span class="string">&#x27;article&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Ethereum’s network is the home&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;og:description&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;twitter:image&#x27;</span>: <span class="string">&#x27;https://static.okx.com/cdn/assets/plugins/contentful/4nqoo8goeymu/56aHhyers8WrWwWSE6M0x3/5c15ce05044a4cfa63f86453cbf86e35/MP_Cover.png&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;viewport&#x27;</span>: <span class="string">&#x27;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Author&#x27;</span>: <span class="string">&#x27;OKX&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;og:site_name&#x27;</span>: <span class="string">&#x27;OKX&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;BTC, BTC trading platform, ETH, EOS, Qtum, NEO, Ripple, BTC price, LTC, BCH, ETC, Blockchain&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;og:image&#x27;</span>: <span class="string">&#x27;https://static.okx.com/cdn/assets/plugins/contentful/4nqoo8goeymu/56aHhyers8WrWwWSE6M0x3/5c15ce05044a4cfa63f86453cbf86e35/MP_Cover.png&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;browsermode&#x27;</span>: <span class="string">&#x27;application&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;og:locale&#x27;</span>: <span class="string">&#x27;en_US&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;twitter:site&#x27;</span>: <span class="string">&#x27;@okx&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;og:url&#x27;</span>: <span class="string">&#x27;https://www.okx.com/learn/curve-finance-guide&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;og:title&#x27;</span>: <span class="string">&#x27;Exploring Curve Finance: A comprehensive guide&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;x5-orientation&#x27;</span>: <span class="string">&#x27;portrait&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;x5-page-mode&#x27;</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;google-site-verification&#x27;</span>: <span class="string">&#x27;SVJL-WGbe8_1J05O3I8V4ehAs8L89UDA-bcAyAJ2SLw&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;full-screen&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;twitter:title&#x27;</span>: <span class="string">&#x27;Exploring Curve Finance: A comprehensive guide&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;twitter:card&#x27;</span>: <span class="string">&#x27;summary_large_image&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;apple-mobile-web-app-capable&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;x5-fullscreen&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Copyright&#x27;</span>: <span class="string">&#x27;okx.com&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;twitter:description&#x27;</span>: <span class="string">&#x27;Ethereum’s network is the home&#x27;</span>&#125;,</span><br><span class="line"><span class="string">&#x27;author&#x27;</span>: [<span class="string">&#x27;OKX&#x27;</span>],</span><br><span class="line"><span class="string">&#x27;timezone&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://www.okx.com/learn/curve-finance-guide&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;amp_url&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;breadcrumb&#x27;</span>: [&#123;<span class="string">&#x27;level&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;Learn&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;link&#x27;</span>: <span class="string">&#x27;https://www.okx.com/learn&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;level&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;Glossary&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;link&#x27;</span>: <span class="string">&#x27;https://www.okx.com/learn/category/blockchain-glossary&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;level&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;Article&#x27;</span>, <span class="string">&#x27;link&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><h3 id="上传HTML片段"><a href="#上传HTML片段" class="headerlink" title="上传HTML片段"></a>上传HTML片段</h3><p> GnePro在解析文章页时,会使用多种方式自动检测页面上的<code>标题</code>,<code>发布时间</code>和<code>正文</code>.这三者缺一不可.如果所有方式都无法找其这三个元素,就会解析失败.如果你的HTML只有一个片段,那么为了让解析能够成功,你需要使用如下模板拼接出完整的HTML:</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是假标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;你的HTML片段&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 然后把这个拼接完成的HTML传给上一小节的接口来进行解析.</p><h2 id="返回字段说明"><a href="#返回字段说明" class="headerlink" title="返回字段说明"></a>返回字段说明</h2><p> 返回字段的意义如下:</p><ul><li>title: 新闻标题</li><li>publish_time_ts: 发布时间的时间戳,精确到秒</li><li>publish_time: 发布时间,格式为YYYY-mm-dd HH:MM:SS</li><li>content: 纯文本形式的正文(段落会被压缩)</li><li>clean_content: 精简以后的正文HTML</li><li>content_list: 按段落和图片划分的正文列表.使用这个字段你可以很方便地把正文和图片的相对位置去分开</li><li>summary:正文的前300个字符</li><li>image_count: 正文中图片的数量</li><li>image_urls: 正文中图片的url列表</li><li>image_captions: 正文图片的标题列表</li><li>head_meta: html中的元信息</li><li>author: 作者</li><li>url: 页面的url.如果页面经过多次跳转,这个url为最终url</li><li>breadcrumb: 面包屑</li></ul><h2 id="如何试用"><a href="#如何试用" class="headerlink" title="如何试用"></a>如何试用</h2><p> 如果你对GnePro有需要,你可以扫描下面的二维码加我微信,我可以给你开试用帐号.</p><p> <img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/WX20231206-213838@2x.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;GnePro是开源项目&lt;a href=&quot;https://github.com/GeneralNewsExtractor/GeneralNewsExtractor&quot;&gt;GNE&lt;/a&gt;的付费版，能够实现如下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入任意文章页面的URL，返回标题&amp;#x2F;作者&amp;#x2F;正文&amp;#x2F;发布时间&amp;#x2F;图片&amp;#x2F;面包屑等一系列信息&lt;/li&gt;
&lt;li&gt;支持异步加载文章页提取&lt;/li&gt;
&lt;li&gt;支持上传自定义的HTML代码提取正文&lt;/li&gt;
&lt;li&gt;支持自动检测网页编码&lt;/li&gt;
&lt;li&gt;支持自动提取网页全部URL&lt;/li&gt;
&lt;li&gt;在8个国家13万个新闻类网站进行测试,准确率高达90%&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
    <category term="爬虫" scheme="https://www.kingname.info/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="通用爬虫" scheme="https://www.kingname.info/tags/%E9%80%9A%E7%94%A8%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：分布式系统的低成本权限校验机制</title>
    <link href="https://www.kingname.info/2023/11/29/jwt/"/>
    <id>https://www.kingname.info/2023/11/29/jwt/</id>
    <published>2023-11-29T12:14:29.000Z</published>
    <updated>2023-11-29T12:15:54.287Z</updated>
    
    <content type="html"><![CDATA[<p>经常关注未闻Code的同学都知道，我做了一个叫做<a href="https://github.com/GeneralNewsExtractor/GeneralNewsExtractor">GNE</a>的开源项目，它能够自动提取新闻类网页的正文。效果远远好于市面上其他的开源新闻提取工具。</p><p>大家可能不知道，GNE还有一个高级版，叫做GnePro。它可以让你输入URL就自动提取新闻的正文，提取的字段比GNE多得多。并且已经在8个国家13万个网站上做过测试，识别准确率100%。</p><span id="more"></span><p>GnePro是使用K8S搭建的爬虫集群。背后有几十台服务器，通过一个网关做负载均衡。在设计GnePro权限机制的时候，我希望它能够尽量简单，尽量不依赖第三方的组件。</p><p>常规的权限校验机制一般是这样的，用户登录以后，在Cookies里面会有一个SessionId.当用户要查询数据时，往后端发起请求。后端从请求中拿到这个SessionId，到Redis或者其他数据库中，查询到这个用户的Session。在Session中，储存了用户的一些登录信息和权限信息。再根据这个权限信息返回用户有权限的内容。</p><p>但这个方法需要额外引入Redis或者其他的数据库。那么这就面临着数据同步，并发冲突等等问题。</p><p>我的需求很简单，只需要知道用户的账户什么时候过期，用户是什么等级就可以了。<code>V1</code>等级只能返回新闻正文，标题，发布时间，作者，图片。<code>V2</code>在<code>V1</code>的基础上，还可以返回面包屑，SEO数据，网页标签，支持JavaScript渲染。<code>V3</code>还可以返回经过清洗的网页正文源代码，支持用户上传HTML进行解析。因此，我不使用Session，而是使用JWT来实现。</p><p>这种情况下，使用JWT非常合适。JWT不需要引入第三方的组件。任何一个服务器都能独立进行权限校验。</p><p>例如，我定义一个数据结构，注明了用户现在是什么等级，这次授权什么时候过期：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_info = &#123;  </span><br><span class="line">    <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;v2&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;expire&#x27;</span>: <span class="string">&#x27;2023-12-01 00:00:00&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;青南&#x27;</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Python中，使用<code>PyJWT</code>就能非常方便地生成JWT Token。首先使用pip安装PyJWT：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install pyjwt</span><br></pre></td></tr></table></figure><p>然后3行代码生成Token：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">user_info = &#123;  </span><br><span class="line">    <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;v1&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;expire&#x27;</span>: <span class="string">&#x27;2023-12-01 00:00:00&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;青南&#x27;</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">password = <span class="string">&#x27;青南工资9999999999&#x27;</span>  </span><br><span class="line">  </span><br><span class="line">token = jwt.encode(user_info, password, algorithm=<span class="string">&#x27;HS256&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231122205212.png"></p><p>经常写爬虫的同学，可能对这个<code>eyJh</code>开头的字符串很熟悉，很多网站的Headers里面都有长成这样的Token。</p><p>当一个用户在我这里充值了会员以后，我就生成一个token发给他。当他使用GnePro发起请求时，把这个Token放到Headers就可以了。</p><p>我的后端收到请求以后，无论当前在哪个服务器上面，只需要执行下面几行代码，就能解析出用户权限信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt  </span><br><span class="line">  </span><br><span class="line">token = <span class="string">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6InYxIiwiZXhwaXJlIjoiMjAyMy0xMi0wMSAwMDowMDowMCIsIm5hbWUiOiJcdTk3NTJcdTUzNTcifQ.8xEkWL1pbtHKMXjrVsTtiY4JZnSMf--ufK3fiDp67SY&#x27;</span>  </span><br><span class="line">password = <span class="string">&#x27;青南工资9999999999&#x27;</span>  </span><br><span class="line">  </span><br><span class="line">user_info = jwt.decode(token, password, algorithms=[<span class="string">&#x27;HS256&#x27;</span>])  </span><br><span class="line"><span class="built_in">print</span>(user_info)</span><br></pre></td></tr></table></figure><p>运行效果如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231122212341.png"></p><p>需要注意的是，这个JWT Token看起来这么长一串，就跟密码一样，但其实我们可以直接使用<a href="https://jwt.io/">Jwt.io</a>这个网站进行解析，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231122212954.png"></p><p>解析JWT Token是不需要密码的。但是生成&#x2F;修改JWT Token需要密码。如果密码不正确，就会生成另外一个JWT Token：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231122213944.png"></p><p>这个Token虽然跟我刚刚生成的非常像，但是由于密码不对，我这边进行校验的时候就会报错：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231122214153.png"></p><p>因此，我生成这个Token以后，我并不担心用户会把<code>level</code>改成<code>v3</code>。因为他没有我的密码，他生成的Token在我这里通不过验证。我就能知道这个Token是否被篡改过。</p><p>整个校验过程只需要几行代码，不需要任何第三方组件。完美符合少即是多的原则。</p><p>当然JWT并不能完全替代Session。因为Session可以实时控制用户的权限和行为。例如网站要做一个单点登录，用户在A浏览器登录，就会自动在B浏览器登出。这个功能单独使用JWT就做不到。</p><p>有人可能会说，你在JWT的信息里面加个SessionId不就好了吗。后端读到SessionId对应的信息，就可以进行更多操作了。</p><p>但这样做，跟直接在Cookies里面放SessionId有什么区别？JWT本来就是在轻量级的权限校验里面使用的。它有适合自己的场景。不需要成为Session。大家也不要把JWT当Session用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;经常关注未闻Code的同学都知道，我做了一个叫做&lt;a href=&quot;https://github.com/GeneralNewsExtractor/GeneralNewsExtractor&quot;&gt;GNE&lt;/a&gt;的开源项目，它能够自动提取新闻类网页的正文。效果远远好于市面上其他的开源新闻提取工具。&lt;/p&gt;
&lt;p&gt;大家可能不知道，GNE还有一个高级版，叫做GnePro。它可以让你输入URL就自动提取新闻的正文，提取的字段比GNE多得多。并且已经在8个国家13万个网站上做过测试，识别准确率100%。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
    <category term="后端" scheme="https://www.kingname.info/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：如何同时在多个分支写代码？</title>
    <link href="https://www.kingname.info/2023/11/15/git-worktree/"/>
    <id>https://www.kingname.info/2023/11/15/git-worktree/</id>
    <published>2023-11-15T13:01:10.000Z</published>
    <updated>2023-11-15T13:02:35.209Z</updated>
    
    <content type="html"><![CDATA[<p>当我们在维护公司项目时，可能会遇到这样的场景：我正在开发一个新功能，突然需要修一个Bug。</p><p>这个时候，有些同学是这样做的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;WIP&#x27;</span></span><br><span class="line">git checkout -b 新的分支名</span><br><span class="line"></span><br><span class="line">...新的代码修改完成并push以后...</span><br><span class="line"></span><br><span class="line">git checkout 老分支</span><br><span class="line">...继续开发...</span><br></pre></td></tr></table></figure><p>更有一些经验的同学，可能会这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line">git checkout -b 新的分支</span><br><span class="line">...新的代码修改完成并push以后...</span><br><span class="line">git checkout 老分支</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>但如果在修这个Bug的时候，又来了一个更紧急的Bug需要修怎么办？到后面很容易就把前面的代码搞忘了。</p><span id="more"></span><p>其实我们有更好的办法，那就是使用<code>git worktree</code>命令。这个命令甚至可以让你同时在10个分支上开发，并且1秒无负担切换到任意分支。</p><p>假设现在我所在的项目文件夹为<code>/Users/kingname/Projects/JobCleaner</code>，在<code>feature</code>分支。现在来了一个Bug需要修复，于是，我只需要执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git worktree add ../JobCleanerBugFix master</span><br><span class="line"><span class="built_in">cd</span> ../JobCleanerBugFix</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>此时，Git会自动在<code>/Users/kingname/Projects/</code>文件夹下面，创建一个新的文件夹<code>JobCleanerBugFix</code>。并且这个代码已经在master分支了。你可以直接使用PyCharm或者任何其他的代码编辑器，打开这个文件夹，然后像正常开发一样修复Bug。</p><p>整个过程中，<code>/Users/kingname/Projects/JobCleaner</code>始终是你之前开发新功能的代码，假设你之前的PyCharm有一个窗口开着这个文件夹，那么你随时可以正常在里面修改代码。</p><p>这个时候如果又来了一个更紧急的Bug了，那么你只需要在<code>/Users/kingname/Projects/JobCleaner</code>里面再次执行代码，创建第三个文件夹即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git worktree add ../JobCleanerP0Bug master</span><br><span class="line"><span class="built_in">cd</span> ../JobCleanerP0Bug</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>这三个文件夹互相独立，你的IDE可以分别打开这三个文件夹，同步修改任何代码。他们完全不会有任何影响，看起来就跟3个独立的项目一样。</p><p>理论上你可以无限这样添加。</p><p>当你在<code>/Users/kingname/Projects/JobCleanerP0Bug</code>下面已经改完了代码，你只需要正常提交就可以了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add xxx.py yyy.py</span><br><span class="line">git commit -m <span class="string">&#x27;修复bug&#x27;</span></span><br><span class="line">git push origin master:bugfix</span><br></pre></td></tr></table></figure><p>提交完成，确认没有任何问题以后，回到<code>/Users/kingname/Projects/JobCleaner</code>文件夹，执行命令<code>git worktree remove ../JobCleanerP0Bug/</code>，就会自动删除<code>/Users/kingname/Projects/JobCleanerP0Bug</code>文件夹。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当我们在维护公司项目时，可能会遇到这样的场景：我正在开发一个新功能，突然需要修一个Bug。&lt;/p&gt;
&lt;p&gt;这个时候，有些同学是这样做的：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&amp;#x27;WIP&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b 新的分支名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...新的代码修改完成并push以后...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout 老分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...继续开发...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;更有一些经验的同学，可能会这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git stash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b 新的分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...新的代码修改完成并push以后...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout 老分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash pop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但如果在修这个Bug的时候，又来了一个更紧急的Bug需要修怎么办？到后面很容易就把前面的代码搞忘了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Git" scheme="https://www.kingname.info/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：警告但不禁止，遗留代码的优化策略</title>
    <link href="https://www.kingname.info/2023/11/14/typeddict/"/>
    <id>https://www.kingname.info/2023/11/14/typeddict/</id>
    <published>2023-11-14T13:21:12.000Z</published>
    <updated>2023-11-14T13:22:43.434Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的多篇文章中，我都反复告诫大家，不要滥用字典来传大量数据。因为当你的函数收到一个字典的时候，你根本不知道这个字典里面有哪些Key，你必须有一层一层往上看，找到所有尝试往字典里面添加新Key的地方，你才能知道它总共有哪些Key。</p><p>但是，在正常公司项目中，我们可能会需要维护一些历史遗留代码。代码规模大，函数调用层级非常深。并且之前的人已经使用字典来传递了大量的数据。</p><p>短时间内，我们没有办法直接把字典改成Dataclass。那么我们能做的，就是尽量避免后续的维护者往里面加入新的Key。我以前遇到过一个项目，它有一个字典，刚刚开始初始化的时候，只有5个Key。这个字典作为参数被传入了很多个函数，每个函数都会往它里面加很多个Key。到最后，这个字典里面已经有40多个Key了。</p><span id="more"></span><p>对历史遗留代码的修改，必须要谨小慎微，稍不注意改错一行代码，可能整个系统就不能工作了。因此，我们的目标是<code>尽量在不影响现有代码功能</code>的情况下，以<code>警告</code>而不是<code>禁止</code>的形式告诉其他开发者，不要再加Key进去了。如果你强行要加入，代码也能运行，但出问题你要自己负责。</p><p>我们知道，Python 的类型标注正好就是警告但不禁止。当你的类型有问题时，他会告诉你这里有错，但你强行要运行，代码也能正常工作。</p><p>对于字典，我们可以使用<code>TypedDict</code>来限制它能有哪些Key。我们来看一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">TypedDict</span>):  </span><br><span class="line">    name: <span class="built_in">str</span>  </span><br><span class="line">    age: <span class="built_in">int</span>  </span><br><span class="line">    address: <span class="built_in">str</span>  </span><br><span class="line">    salary: <span class="built_in">int</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">kingname: User = &#123;  </span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;青南&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,  </span><br><span class="line">    <span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;上海&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;salary&#x27;</span>: <span class="number">9999999999</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_dict</span>(<span class="params">user: User</span>):  </span><br><span class="line">    <span class="built_in">print</span>(user[<span class="string">&#x27;name&#x27;</span>])</span><br></pre></td></tr></table></figure><p>这只是一段看似非常普通的代码，在PyCharm也看不出有什么异常：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231114205721.png"></p><p>但当我想在函数里面，额外往字典加一个新字段时，就会发出警报：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231114205854.png"></p><p>这个警告在一定程度上，可以提醒其他人不要往字典中乱加Key。虽然强行添加也没有问题，但至少起到了提醒的作用。</p><p>如果你在一开始初始化字典时，就把类型指定好，那么你一开始就必须提供所有字段，否则它也会发出警告，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231114210236.png"></p><p>这种情况下，我们可以在初始化字典时，不加类型标注，但在函数参数里面加上类型标注。那么这样以来，就能实现：<code>只能往字典添加特定的字段，不能添加额外字段</code>。如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231114210502.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在之前的多篇文章中，我都反复告诫大家，不要滥用字典来传大量数据。因为当你的函数收到一个字典的时候，你根本不知道这个字典里面有哪些Key，你必须有一层一层往上看，找到所有尝试往字典里面添加新Key的地方，你才能知道它总共有哪些Key。&lt;/p&gt;
&lt;p&gt;但是，在正常公司项目中，我们可能会需要维护一些历史遗留代码。代码规模大，函数调用层级非常深。并且之前的人已经使用字典来传递了大量的数据。&lt;/p&gt;
&lt;p&gt;短时间内，我们没有办法直接把字典改成Dataclass。那么我们能做的，就是尽量避免后续的维护者往里面加入新的Key。我以前遇到过一个项目，它有一个字典，刚刚开始初始化的时候，只有5个Key。这个字典作为参数被传入了很多个函数，每个函数都会往它里面加很多个Key。到最后，这个字典里面已经有40多个Key了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>老板让我加班怎么办？GPTs创建机器人实战</title>
    <link href="https://www.kingname.info/2023/11/11/gpts/"/>
    <id>https://www.kingname.info/2023/11/11/gpts/</id>
    <published>2023-11-11T06:57:43.000Z</published>
    <updated>2023-11-11T07:00:05.749Z</updated>
    
    <content type="html"><![CDATA[<p>前两天的OpenAI发布会，相信很多同学看完以后都热血沸腾。我之前一直使用的是ChatGPT的免费版本，看完这个发布会以后，立刻就充值了ChatGPT Plus，来试一试这些高级功能。</p><p>这两天GPTs功能上线了，短短三天时间，全球网友创建了几千个GPT机器人。我今天也来搞一个玩玩。</p><p>使用GPTs创建机器人非常简单，不需要懂任何编程知识，甚至不需要懂Prompt工程，你只需要跟着他的向导，一步一步描述你的想法就可以了。</p><span id="more"></span><p>当我们成为了ChatGPT Plus会员以后，在ChatGPT页面会看到一个<code>Explore</code>的栏目，如下图所示。进入这个栏目，点击<code>Create a GPT</code>就可以开始创建自己的机器人了。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231111140708.png"></p><p>在左侧，是机器人创建向导，它会首先让你描述一下，你想实现什么功能。这个地方不需要懂Prompt工程，你只需要像平时说话一样写出自己的需求就可以了。写中文或者英文都可以。如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231111142319.png"></p><p>描述完成需求以后，他会给你建议一个机器人的名字，你要是觉得他取的名字不好，你也可以自己想一个，直接输入到对话框中。</p><p>设置完成名字以后，他会自动给机器人生成头像。头像生成完成以后，会针对需求的一些细节问题跟你进一步确认，例如“当老板的需求明显不合理时，你应该直白拒绝还是委婉提出”。</p><p>你只需要一步一步跟着他的问题进行回复就可以了。我这个机器人创建完成，全程耗时大概10分钟左右。</p><p>创建完成以后，点击右上角的“Save”就可以保存。然后跳转回聊天页面，如下图所示。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231111135632.png"></p><p>如果测试发现回答不好，可以在Explore页面编辑这个机器人，添加新的需求，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231111140147.png"></p><p>下面是我的一些聊天记录，大家可以看看效果。</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231111140305.png"></p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231111140412.png"></p><p>在机器人的设置页面，进入<code>Configure</code>选项卡，可以看到机器人的配置信息，其中的Instructions，我理解才是真正的<code>Prompt</code>。它的内容，是GPT通过刚才跟你的一问一答，动态生成出来的。如果你会Prompt工程，你也可以直接在这里修改，速度更快。<br><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231111140513.png"></p><p><a href="https://chat.openai.com/g/g-Ru4uLNeoZ-ju-jue-gao-shou">Site Unreachable</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前两天的OpenAI发布会，相信很多同学看完以后都热血沸腾。我之前一直使用的是ChatGPT的免费版本，看完这个发布会以后，立刻就充值了ChatGPT Plus，来试一试这些高级功能。&lt;/p&gt;
&lt;p&gt;这两天GPTs功能上线了，短短三天时间，全球网友创建了几千个GPT机器人。我今天也来搞一个玩玩。&lt;/p&gt;
&lt;p&gt;使用GPTs创建机器人非常简单，不需要懂任何编程知识，甚至不需要懂Prompt工程，你只需要跟着他的向导，一步一步描述你的想法就可以了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ChatGPT" scheme="https://www.kingname.info/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：如何安全运行别人上传的Python代码？</title>
    <link href="https://www.kingname.info/2023/11/11/python-run-other-code/"/>
    <id>https://www.kingname.info/2023/11/11/python-run-other-code/</id>
    <published>2023-11-11T06:55:59.000Z</published>
    <updated>2023-11-11T06:57:33.789Z</updated>
    
    <content type="html"><![CDATA[<p>写后端的同学，有时候需要在网站上实现一个功能，让用户上传或者编写自己的Python代码。后端再运行这些代码。</p><p>涉及到用户自己上传代码，我们第一个想到的问题，就是如何避免用户编写危险命令。如果用户的代码里面涉及到下面两行，在不做任何安全过滤的情况下，就会导致服务器的Home文件夹被清空。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.system(&#x27;rm -rf ~/*&#x27;)</span><br></pre></td></tr></table></figure><p>有人想的比较简单，直接判断用户的代码里面有没有<code>os.system</code>、<code>exec</code>、<code>subprocess</code>……这些危险关键词不就可以了吗？</p><p>这种想法乍看起来没有问题，但细想下，就会发现非常天真。如果用户的代码像下面这样写，你又要如何应对？</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">code = requests.get(<span class="string">&#x27;https://www.kingname.info/dangerous_code&#x27;</span>).text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;dangerous_code.py&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(code)</span><br><span class="line"></span><br><span class="line">dangerous_module = <span class="built_in">__import__</span>(<span class="string">&#x27;dangerous_code&#x27;</span>)</span><br><span class="line">danderous_module.delete_all()</span><br></pre></td></tr></table></figure><p>其中<code>https://www.kingname.info/dangerous_code</code>对应的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_all</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;rm -rf ~/*&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样就可以绕过关键字检查，并成功删除你的文件了。</p><p>如果你的网站本身就是一个爬虫管理平台，你检查用户自定义的代码时，肯定不能过滤掉<code>requests</code>这种网络请求库。那么你就很难判断用户下载下来的东西是否包含恶意代码。</p><p>而且恶意代码不一定是删除你的东西，它完全可以直接把你项目下面的所有代码打包，上传到它指定的URL中，这样就能窃取你网站里面所有代码。</p><p>为了避免这样的情况发生，我们就必须找一个干净又独立的环境来运行用户的代码。干净的环境能确保恶意代码没有东西可以偷，独立的环境能确保他即使删除了所有文件，也不会影响到你。</p><p>显然，最简单直接的办法，就是使用Docker来运行用户的代码。而使用Docker并不一定需要在终端使用Shell命令。我们可以使用Docker的Python SDK来实现构建镜像和运行镜像。</p><p>首先，确保你的服务器上面已经有Docker，并且正在运行。接下来，安装Docker SDK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker</span><br></pre></td></tr></table></figure><p>假设，你把用户上传的文件放在了<code>user/&lt;user_id&gt;/upload</code>文件夹下面，那么，首先你需要生成一个Dockerfile，并把这个Dockerfile放到upload文件夹中：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> python:<span class="number">3.10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">run</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">copy</span><span class="language-bash"> . /app</span></span><br><span class="line"><span class="keyword">workdir</span><span class="language-bash"> /app</span></span><br></pre></td></tr></table></figure><p>当用户添加&#x2F;修改了第三方库时，你只需要更新requirements.txt即可让镜像里面的依赖符合用户的需求。</p><p>接下来，我们开始构建镜像并运行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> docker</span><br><span class="line">client = docker.from_env()</span><br><span class="line"></span><br><span class="line">client.images.build(path=<span class="string">&#x27;user/&lt;user_id&gt;/upload&#x27;</span>, tag=<span class="string">&#x27;xxxspider:0.01&#x27;</span>) <span class="comment"># tag后面的名字可以自定义</span></span><br><span class="line"></span><br><span class="line">container = client.containers.run(<span class="string">&#x27;xxxspider:0.01&#x27;</span>, detach=<span class="literal">True</span>, command=<span class="string">&#x27;scrapy crawl xxx&#x27;</span>, 其他参数)</span><br></pre></td></tr></table></figure><p>这个代码运行以后是非阻塞的，会立刻返回container对象。当你想查看代码日志时，执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container.logs(tail=<span class="number">10</span>) <span class="comment"># 显示最后10行日志</span></span><br></pre></td></tr></table></figure><p>就可以看到相关的日志了。</p><p>关于Docker SDK的更多操作，可以看他的官方文档：<a href="https://docker-py.readthedocs.io/en/stable/index.html#docker-sdk-for-python">Docker SDK for Python — Docker SDK for Python 6.1.3 documentation</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;写后端的同学，有时候需要在网站上实现一个功能，让用户上传或者编写自己的Python代码。后端再运行这些代码。&lt;/p&gt;
&lt;p&gt;涉及到用户自己上传代码，我们第一个想到的问题，就是如何避免用户编写危险命令。如果用户的代码里面涉及到下面两行，在不做任何安全过滤的情况下，就会导致服务器的Home文件夹被清空。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os.system(&amp;#x27;rm -rf ~/*&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有人想的比较简单，直接判断用户的代码里面有没有&lt;code&gt;os.system&lt;/code&gt;、&lt;code&gt;exec&lt;/code&gt;、&lt;code&gt;subprocess&lt;/code&gt;……这些危险关键词不就可以了吗？&lt;/p&gt;
&lt;p&gt;这种想法乍看起来没有问题，但细想下，就会发现非常天真。如果用户的代码像下面这样写，你又要如何应对？&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
    <category term="Docker" scheme="https://www.kingname.info/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：爬虫如何解析JavaScript Object？</title>
    <link href="https://www.kingname.info/2023/10/28/parse-json-object/"/>
    <id>https://www.kingname.info/2023/10/28/parse-json-object/</id>
    <published>2023-10-28T04:09:38.000Z</published>
    <updated>2023-10-28T04:10:47.627Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发爬虫的过程中，经常发现有一些网站，会直接把数据放到HTML中的<code>&lt;script&gt;</code>标签里面。这些数据长得有点像JSON，但又有差异，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231028114032.png"></p><p>这种格式，我们叫做JavaScript Object。长得很像Python的字典，又很像是JSON。但是这个格式在Python里面，无论直接当字典解析，还是当JSON解析，都会报错，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231028114304.png"></p><p>遇到这种情况，有同学准备使用正则表达式来解析，又有同学直接放弃。</p><span id="more"></span><p>但实际上，这种数据结构，使用Yaml是可以直接解析成Python的字典。我们首先来安装一下Yaml：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyyaml</span><br></pre></td></tr></table></figure><p>然后直接像解析JSON一样解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">data = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    name: &#x27;青南&#x27;,</span></span><br><span class="line"><span class="string">    salary: 999999999,</span></span><br><span class="line"><span class="string">    address: &#x27;上海&#x27;,</span></span><br><span class="line"><span class="string">    pro: true</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">info = yaml.safe_load(data)</span><br></pre></td></tr></table></figure><p>运行效果如下图所示，已经直接解析成了Python的字典：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231028114627.png"></p><p>Yaml格式是JSON格式的超集，因此，使用pyyaml库也能直接解析正常的JSON：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231028114801.png"></p><p>甚至各种复杂的混合格式也能正常解析：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231028115156.png"></p><p>关于YAML格式的更多介绍，请看我以前的文章：</p><p><a href="https://mp.weixin.qq.com/s/SYehHHKofb2lA_J7--UjGA">一日一技：不用游标卡尺，Yaml 格式5分钟入门</a><br><a href="https://mp.weixin.qq.com/s/I4Uyw8Zrkf7bwzbyR8dE_A">一日一技：如何处理配置文件中的重复值？</a><br><a href="https://mp.weixin.qq.com/s/jEQMNxC4o0PKSrQz4rI7Lw">一日一技：优雅地加载Yaml配置文件</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们在开发爬虫的过程中，经常发现有一些网站，会直接把数据放到HTML中的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签里面。这些数据长得有点像JSON，但又有差异，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231028114032.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;这种格式，我们叫做JavaScript Object。长得很像Python的字典，又很像是JSON。但是这个格式在Python里面，无论直接当字典解析，还是当JSON解析，都会报错，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231028114304.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;遇到这种情况，有同学准备使用正则表达式来解析，又有同学直接放弃。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
    <category term="爬虫" scheme="https://www.kingname.info/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：HTML里面提取的JSON怎么解析不了？</title>
    <link href="https://www.kingname.info/2023/10/28/json-in-html/"/>
    <id>https://www.kingname.info/2023/10/28/json-in-html/</id>
    <published>2023-10-28T03:33:18.000Z</published>
    <updated>2023-10-28T04:11:28.288Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发爬虫的过程中，经常发现有一些网站，会直接把数据以JSON的形式，通过<code>&lt;script&gt;</code>标签放到页面源代码中。如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017203837.png"></p><p>有时候请求URL拿到HTML的过程比较麻烦，有些同学习惯先把HTML复制到代码里面，先把解析的逻辑写好，然后再去开发请求HTML的代码。</p><span id="more"></span><p>这个思路本身是没有什么问题的，于是他们就写了如下的代码：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017204158.png"></p><p>代码中的<code>html_data = &#39;&#39;&#39;</code>里面就是原样复制的网页HTML，没有做任何修改，因为太长了，我这里做了折叠。展开以后如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017204331.png"></p><p>但当运行这段代码的时候，发现代码报错了，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017211730.png"></p><p>看这个报错信息，难道说是JSON本身有问题？于是，你到网页上，把这个JSON复制下来：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017211909.png"></p><p>使用JSONHero这种验证网站，进行验证，结果发现一切正常：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017212033.png"></p><p>这就见鬼了，为什么正则表达式提取的JSON就不对呢？你开启PyCharm的调试模式，看看正则表达式提取出来的JSON：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017212214.png"></p><p>你把提取出来的JSON复制粘贴到JSONHero网站上，竟然报错了：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017212329.png"><br>到底是哪里有问题呢？为什么直接从网页上复制JSON就没有问题，而使用正则表达式提取的JSON就有问题呢？</p><p>其实原因非常简单，问题就出现在HTML中的JSON里面的反斜杠：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017212617.png"></p><p>我们知道，反斜杠是不能单独存在的，它有自己独特的意义。在代码里面，我使用了<code>&#39;&#39;&#39;</code>三个引号来抱住整个网页的HTML，这个时候，Python发现这里的<code>\&quot;</code>这种写法，会自动把反斜杠去掉。于是，正则表达式提取出来的JSON，引号就会出现冲突，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017213018.png"></p><p>这样的JSON就会变成不合法的JSON。因为在JSON中，字符串内部作为普通字符的双引号，应该使用反斜杠转义，而这里的反斜杠被自动删除了。</p><p>要解决这个问题，有三种方法：</p><ul><li>手动修改JSON里面的所有反斜杠，把每一根反斜杠变成两根反斜杠：<code>\&quot;</code> -&gt; <code>\\&quot;</code>。（太麻烦了，就不演示了）</li><li>在三引号前加上<code>r</code>，此时Python会自动把所有的反斜杠转换为普通的字符串：<br><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017213410.png"></li><li>把HTML写到文件里面，通过读文件的形式来读源代码。Python自动就会处理反斜杠。</li></ul><p>总结，这个问题只有在你直接把HTML粘贴到Python代码里面的时候会出现。如果你是直接使用Requests请求网页，或者你把HTML存到文件里面，通过读文件的形式来读HTML，那么Python都能自动处理好这个反斜杠的问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们在开发爬虫的过程中，经常发现有一些网站，会直接把数据以JSON的形式，通过&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签放到页面源代码中。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231017203837.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;有时候请求URL拿到HTML的过程比较麻烦，有些同学习惯先把HTML复制到代码里面，先把解析的逻辑写好，然后再去开发请求HTML的代码。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
    <category term="爬虫" scheme="https://www.kingname.info/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：Requests被网站识别怎么办？</title>
    <link href="https://www.kingname.info/2023/10/17/curl-cffi/"/>
    <id>https://www.kingname.info/2023/10/17/curl-cffi/</id>
    <published>2023-10-17T12:21:58.000Z</published>
    <updated>2023-10-17T12:22:30.006Z</updated>
    
    <content type="html"><![CDATA[<p>现在有很多网站，已经能够通过JA3或者其他指纹信息，来识别你的请求是不是Requests发起的。这种情况下，你无论怎么改Headers还是代理，都没有任何意义。</p><p>我之前写过一篇文章：<a href="https://mp.weixin.qq.com/s/7VJHCl2ht4pjkgIdcOKc5w">Python如何突破JA3</a>，但方法非常复杂，很多初学者表示上手有难度。那么今天我来一个更简单的方法，只需要修改两行代码。并且不仅能过JA3，还能过Akamai。</p><span id="more"></span><p>先来看一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line">  </span><br><span class="line">headers = &#123;  </span><br><span class="line">    <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;dnt&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;118&quot;, &quot;Microsoft Edge&quot;;v=&quot;118&quot;, &quot;Not=A?Brand&quot;;v=&quot;99&quot;&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;sec-fetch-user&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;upgrade-insecure-requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46&#x27;</span>,  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">response = requests.get(<span class="string">&#x27;https://tls.browserleaks.com/json&#x27;</span>, headers=headers)  </span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br></pre></td></tr></table></figure><p>运行效果如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231016224733.png"></p><p>这是直接使用Requests发起的请求。你可以试一试，加上代理以后，这里的<code>ja3_hash</code>并不会发生变化。并且<code>akamai_hash</code>和<code>akamai_text</code>都是空。这个特征上非常明显的，网站直接根据这些特征就可以屏蔽你的爬虫。</p><p>现在，我们使用两行代码解决这个问题。</p><p>首先，安装一个第三方库：<code>curl_cffi</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install curl_cffi</span><br></pre></td></tr></table></figure><p>然后，修改我们这段代码的第一行，把<code>import requests</code>改成<code>from curl_cffi import requests</code>。最后，在<code>requests.get</code>中加一个参数：<code>impersonate=&quot;chrome110&quot;</code>。完整效果如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20231016225250.png"></p><p>完成了。以上就是全部修改。网站已经无法识别你的爬虫了。在网站看来，这只是一个Chrome 110版本发起的请求。甚至Akamai需要的签名也都有了。</p><p><code>curl_cffi</code>不仅完全兼容Requests的语法，而且还支持Asyncio。要使用异步写法时，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> curl_cffi.requests <span class="keyword">import</span> AsyncSession</span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">&quot;https://googel.com/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://facebook.com/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://twitter.com/&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> AsyncSession() <span class="keyword">as</span> s:</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        task = s.get(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">        tasks.append(task)</span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>关于<code>curl_cffi</code>的更多用法，可以查看它的Github：<a href="https://github.com/yifeikong/curl_cffi">Python binding for curl-impersonate via cffi</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在有很多网站，已经能够通过JA3或者其他指纹信息，来识别你的请求是不是Requests发起的。这种情况下，你无论怎么改Headers还是代理，都没有任何意义。&lt;/p&gt;
&lt;p&gt;我之前写过一篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s/7VJHCl2ht4pjkgIdcOKc5w&quot;&gt;Python如何突破JA3&lt;/a&gt;，但方法非常复杂，很多初学者表示上手有难度。那么今天我来一个更简单的方法，只需要修改两行代码。并且不仅能过JA3，还能过Akamai。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
    <category term="爬虫" scheme="https://www.kingname.info/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>拒绝成为这样的程序员</title>
    <link href="https://www.kingname.info/2023/10/17/rubbish/"/>
    <id>https://www.kingname.info/2023/10/17/rubbish/</id>
    <published>2023-10-17T12:20:36.000Z</published>
    <updated>2023-10-17T12:21:20.216Z</updated>
    
    <content type="html"><![CDATA[<p>产品经理这两天在跟我抱怨他们公司的一个码农。听的我火冒三丈，差点把跟了我十多年的搪瓷水杯砸烂。</p><p>正好在知识星球和微信群里面，有不少同学跟我咨询程序员的职业发展以及怎么应对三十岁危机。</p><p>借此机会，我准备用几篇文章来讲讲自己的经验和个人的观点。</p><span id="more"></span><p>有这样一批人，他们在大公司里工作了十几年，年龄一大把，还是一个大头兵。他们被号称经验丰富，但实际上是把一年的工作经验用了十多年，对主流的技术一无所知，他们已经无法适应现在的技术发展。</p><p>这些人，每天看起来非常努力，加班加到很晚。产品经理提需求，他们看起来是在非常努力的完成，但完成的效果非常差。产品给他们提修改意见，他们看起来非常积极地去修改。但是改了A问题，出现B问题，改了B问题，出现C问题，修好C问题，A问题又出现了……</p><p>产品经理每次一说产出效果不好，他们马上就会蹦出一大堆技术名词，又是什么业界难题，又是什么行业边界，又是什么技术翘翘板，把A改了，那么从理论上说B就一定有问题。ABC三个需求无法同时满足。言语之间时不时蹦出一些他们昨天刷公众号看到的技术名词。但其实真正的原因是这个需求达到了他们知识的边界，而他们又不愿意学习。他们花3个月做出来的东西，换一个应届生2天就能完成，而且效果好十倍。</p><p>这些人，永远把自己当作一个螺丝钉。产品需要什么，自己就做什么。产品不说的，自己坚决不做。产品找过来，一句“你又没有说要这个功能”就把自己的责任推卸干净。</p><p>当任务涉及到多个人协作时，这些人把自己的活干完就跑了。从来不会通知一下上下游的同事。等到项目预计上线的前一晚，产品经理来问：</p><blockquote><p>“你这个功能做完了吗？”<br>“做完了。”<br>“那调试好了吗？”<br>“我不知道上游的xx和下游的yy他们做完了没有。”</p></blockquote><p>这样的人，我称之为老油条。</p><p>老油条特别喜欢装无辜，我都已经这么努力了，你还想怎么样？然后在线上线下宣传自己被公司压榨，被同事排挤，被老员工PUA.但真实的情况是，公司只让他在做这一件事情，他做了三个月。每一次效果不好，其他人都在陪着他分析原因，等他修改。改完以后效果更差。大家给他一次又一次机会，上线时间为他一次又一次推迟，他一次又一次让大家失望。每次还都会找各种理由各种借口。</p><p>很多人希望公司能够开除他，但是老板有顾虑，公司有担忧。不敢开除，甚至不敢给他打低绩效。公司，特别是大公司，非常害怕他们在网上发帖。</p><p>弱小不一定有理，弱小只是某些老油条的遮羞布。</p><p>我觉得现在互联网环境的风气极差。正适合这些老油条肆意妄为。</p><p>当一个人在网上发帖说自己被公司开除了，一大批不知道任何内情的网民就会开始攻击公司，觉得这个人太可怜，觉得这个公司太黑毫无人性。特别是当公司是某些著名大厂时，这种攻击更是毫不留情。</p><p>民众总是相信弱小者的哭诉，从来听不见强者背后的辩解。知情人为公司解释两句，一大群人站出来要为弱小着主持公道：你是资本的走狗，你是五毛党，你收了多少钱。</p><p>正是这样的老油条，导致开除一个人的成本非常高，公司迫于不想惹麻烦，很多时候对于能力差的人选择睁一只眼闭一只眼。现在大环境降本增效，去肥增瘦，能力差的老油条占住了坑位，就会导致真正有能力的人失去一个又一个进入大厂的机会。</p><p>几个大厂里面，有很多很多这样的老油条。看这篇文章的你，本来有机会进大厂一展才华，但都是因为这些老油条占住了人头，导致对应的岗位不再招人。其实你比他更加适合这个岗位，但没办法。</p><p>公司没有办法开掉这些人，因为现在舆论的风暴太猛。这些风暴始于老油条的装可怜，加强于键盘党的假公道，盛行于跟风人的瞎同情。</p><p>没有办法，真的没办法。</p><p>每当产品经理跟我讲起他们公司里面的老油条，我都恨不能当场掀桌，但没办法，我吵架超不过，大架也打不过。赢了坐牢，输了住院。</p><p>没办法，真的没办法。</p><p>只盼大家擦亮眼睛，在同情某些被劝退的互联网员工前，别急着站队，先想想这个人是不是占了本该属于你的岗位。</p><hr><p>抱怨归抱怨，希望大家不要成为这样的人。我们下一篇文章，来讲讲我们应该如何成为一个不会被年龄所限制的优秀工程师。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;产品经理这两天在跟我抱怨他们公司的一个码农。听的我火冒三丈，差点把跟了我十多年的搪瓷水杯砸烂。&lt;/p&gt;
&lt;p&gt;正好在知识星球和微信群里面，有不少同学跟我咨询程序员的职业发展以及怎么应对三十岁危机。&lt;/p&gt;
&lt;p&gt;借此机会，我准备用几篇文章来讲讲自己的经验和个人的观点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="开发经验" scheme="https://www.kingname.info/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：JSON如何快速转成对象？</title>
    <link href="https://www.kingname.info/2023/09/22/json-to-obj/"/>
    <id>https://www.kingname.info/2023/09/22/json-to-obj/</id>
    <published>2023-09-22T13:54:06.000Z</published>
    <updated>2023-09-22T13:55:10.904Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，在Python里面，要把JSON转成字典是非常容易的，只需要使用<code>json.loads(JSON字符串)</code>就可以了。</p><p>但如果这个JSON转成的字典，嵌套比较深，那么要读取里面的数据就非常麻烦了。如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230921195257.png"></p><p>如果我要读取把图中的<code>end</code>减去<code>start</code>字段，那么用字典的时候，代码要写成这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = info[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;entities&#x27;</span>][<span class="string">&#x27;annotations&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;end&#x27;</span>] - info[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;entities&#x27;</span>][<span class="string">&#x27;annotations&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;start&#x27;</span>]</span><br></pre></td></tr></table></figure><p>光是看到这些方括号和单引号，就够让人头晕了。</p><span id="more"></span><p>但如果改成下面这样，看起来就清爽多了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = info.data[<span class="number">0</span>].entities.annotations[<span class="number">0</span>].end - info.data[<span class="number">0</span>].entities.annotations[<span class="number">0</span>].start</span><br></pre></td></tr></table></figure><p>那么如何快速把一个嵌套很深的字典转换为对象呢？其实非常简单，使用Python自带的<code>SimpleNamespace</code>就可以了。</p><p>使用<code>SimpleNamespace</code>可以快速创建一个空对象，并设置它的属性，用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> SimpleNamespace</span><br><span class="line"></span><br><span class="line">ins = SimpleNamespace(aa=<span class="number">1</span>, bb=<span class="number">2</span>, cc=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ins.bb)</span><br></pre></td></tr></table></figure><p>运行效果如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230921202311.png"></p><p>基于字典创建也非常简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> SimpleNamespace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;aa&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;bb&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;cc&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">ins = SimpleNamespace(**data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ins.bb)</span><br></pre></td></tr></table></figure><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230921202359.png"><br>对于深层嵌套的JSON字符串，我们在使用<code>json.loads</code>时，额外设置一个参数：<code>object_hook</code>，就可以实现递归式转换内层字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = json.loads(JSON字符串, object_hook=<span class="keyword">lambda</span> d: SimpleNamespace(**d))</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230921203719.png"></p><p>关于参数<code>object_hook</code>的具体用法，大家可以看<a href="https://docs.python.org/3/library/json.html#json.loads">官方文档</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们知道，在Python里面，要把JSON转成字典是非常容易的，只需要使用&lt;code&gt;json.loads(JSON字符串)&lt;/code&gt;就可以了。&lt;/p&gt;
&lt;p&gt;但如果这个JSON转成的字典，嵌套比较深，那么要读取里面的数据就非常麻烦了。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230921195257.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果我要读取把图中的&lt;code&gt;end&lt;/code&gt;减去&lt;code&gt;start&lt;/code&gt;字段，那么用字典的时候，代码要写成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;result = info[&lt;span class=&quot;string&quot;&gt;&amp;#x27;data&amp;#x27;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&amp;#x27;entities&amp;#x27;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&amp;#x27;annotations&amp;#x27;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&amp;#x27;end&amp;#x27;&lt;/span&gt;] - info[&lt;span class=&quot;string&quot;&gt;&amp;#x27;data&amp;#x27;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&amp;#x27;entities&amp;#x27;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&amp;#x27;annotations&amp;#x27;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&amp;#x27;start&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;光是看到这些方括号和单引号，就够让人头晕了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：从Pandas DataFrame两个小技巧</title>
    <link href="https://www.kingname.info/2023/09/05/pandas-normal-columns/"/>
    <id>https://www.kingname.info/2023/09/05/pandas-normal-columns/</id>
    <published>2023-09-05T15:08:39.000Z</published>
    <updated>2023-09-05T15:09:21.289Z</updated>
    
    <content type="html"><![CDATA[<p>今天我从网上下载了一批数据。这些数据是Excel格式，我需要把他们转移到MySQL中。这是一个非常简单的需求。</p><span id="more"></span><p>正常情况下，我们只需要5行代码就能解决问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&#x27;数据库链接URI&#x27;</span>, echo=<span class="literal">False</span>)</span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;Excel文件路径&#x27;</span>)</span><br><span class="line">df.to_sql(name=<span class="string">&#x27;表名&#x27;</span>, con=engine)</span><br></pre></td></tr></table></figure><p>但我发现，这个下载的文件有两个工作簿(Sheet)，第一个Sheet叫做<code>Overall</code>，第二个Sheet叫做<code>Result</code>。我们需要的数据在<code>Result</code>这个工作簿中。那么，在使用Pandas读取时，需要这样写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&#x27;文件路径&#x27;</span>, <span class="string">&#x27;Result&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第二个问题，是这个Excel表格的列名，包含了一些不能作为MySQL字段名的值，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230905223117.png"><br>其中的空格、括号、百分号、&amp;符号都不适合放到MySQL的字段名中。那么怎么快速批量把这些字符全部替换掉呢？可以使用如下的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.columns = df.columns.<span class="built_in">str</span>.strip().<span class="built_in">str</span>.lower().<span class="built_in">str</span>.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;_&#x27;</span>).<span class="built_in">str</span>.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="built_in">str</span>.replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="built_in">str</span>.replace(<span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;percent_unit&#x27;</span>).<span class="built_in">str</span>.replace(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;_and_&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样可以批量把所有列名转换为小写字母，并移除特殊符号。效果如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230905223656.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天我从网上下载了一批数据。这些数据是Excel格式，我需要把他们转移到MySQL中。这是一个非常简单的需求。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
    <category term="Pandas" scheme="https://www.kingname.info/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：如何同时使用多个GPT的API Key？</title>
    <link href="https://www.kingname.info/2023/09/03/multi-gpt-key/"/>
    <id>https://www.kingname.info/2023/09/03/multi-gpt-key/</id>
    <published>2023-09-03T02:19:50.000Z</published>
    <updated>2023-09-03T02:20:42.886Z</updated>
    
    <content type="html"><![CDATA[<p>相信很多同学或多或少都在Python中使用过GPT API，通过Python安装<code>openai</code>库，来调用GPT模型。</p><p>OpenAI官方文档中给出了一个示例，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230903093758.png"><br>如果你只有一个API账号，那么你可能不觉得这样写有什么问题。但如果你想同时使用两个账号怎么办？</p><span id="more"></span><p>有些同学可能知道，微软的Azure也提供GPT接口，在Python中也需要通过<code>openai</code>库来调用，它的调用示例为：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230903094110.png"><br>当你全局设置了<code>openai.api_type = &#39;azure&#39;</code>以后，你怎么同时使用OpenAI的GPT接口？</p><p>这两个文档中给出的示例写法，都是全局写法，一但设定以后，在整个运行时中，所有调用GPT接口的地方，都会使用这里设置的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"></span><br><span class="line">openai.xx = yy</span><br></pre></td></tr></table></figure><p>有些同学不知道怎么在Python SDK中同时使用多个账号，于是他们只有使用GPT的Rest HTTP接口，自己封装一个函数来发起请求从而切换不同的账号。放弃了Python SDK提供的各种便利。</p><p>但实际上，根本没有那么麻烦。在<code>openai</code>模块里面，天然就可以切换多个账号。虽然文档里面没有写，但是我们可以通过函数签名来找到这种方法。</p><p>如下图所示，在PyCharm中，随便写一段调用<code>openai</code>模块的代码，然后Windows按下键盘的Ctrl，MacOS按下键盘的Command，并鼠标左键点击<code>create</code>函数：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230903094837.png"><br>跳转到的函数里面，还有一个<code>create</code>函数，继续按上面的方法跳入，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230903094937.png"><br>接下来，你就会看到这个<code>create</code>函数能够接受的参数里面，包含了几个很熟悉的名字：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230903095029.png"></p><p>也就是说，当你想同时调用多个账号时，不需要在一开始给openai设置对应的参数，你只需要在调用<code>.create</code>函数的时候，把对应的API参数传入就可以了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用OpenAI账号1</span></span><br><span class="line">response1 = openai.ChatCompletion.create(  </span><br><span class="line">            engine=<span class="string">&quot;chatgpt&quot;</span>,  </span><br><span class="line">            messages=messages,  </span><br><span class="line">            temperature=<span class="number">0.9</span>,  </span><br><span class="line">            max_tokens=<span class="number">800</span>,  </span><br><span class="line">            top_p=<span class="number">0.95</span>,  </span><br><span class="line">            frequency_penalty=<span class="number">0</span>,  </span><br><span class="line">            presence_penalty=<span class="number">0</span>,  </span><br><span class="line">            api_key=<span class="string">&#x27;xxxxxxxx&#x27;</span>,  <span class="comment"># 在这里传入API Key</span></span><br><span class="line">            stop=[<span class="string">&quot;&lt;|im_end|&gt;&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用OpenAI账号2</span></span><br><span class="line">response2 = openai.ChatCompletion.create(  </span><br><span class="line">            engine=<span class="string">&quot;chatgpt16k&quot;</span>,  </span><br><span class="line">            messages=messages,  </span><br><span class="line">            temperature=<span class="number">0.9</span>,  </span><br><span class="line">            max_tokens=<span class="number">800</span>,  </span><br><span class="line">            top_p=<span class="number">0.95</span>,  </span><br><span class="line">            frequency_penalty=<span class="number">0</span>,  </span><br><span class="line">            presence_penalty=<span class="number">0</span>,  </span><br><span class="line">            api_key=<span class="string">&#x27;yyyyyyyyy&#x27;</span>,   <span class="comment"># 在这里传入API Key</span></span><br><span class="line">            stop=[<span class="string">&quot;&lt;|im_end|&gt;&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Azure OpenAI 账号</span></span><br><span class="line">response3 = openai.ChatCompletion.create(  </span><br><span class="line">            engine=<span class="string">&quot;gpt4&quot;</span>,  </span><br><span class="line">            messages=messages,  </span><br><span class="line">            temperature=<span class="number">0.9</span>,  </span><br><span class="line">            max_tokens=<span class="number">800</span>,  </span><br><span class="line">            top_p=<span class="number">0.95</span>,  </span><br><span class="line">            frequency_penalty=<span class="number">0</span>,  </span><br><span class="line">            presence_penalty=<span class="number">0</span>,  </span><br><span class="line">            api_key=<span class="string">&#x27;zzzzzzz&#x27;</span>,   <span class="comment"># 在这里传入API Key</span></span><br><span class="line">            api_base=<span class="string">&#x27;https://xxx.openai.azure.com/&#x27;</span>,  </span><br><span class="line">            api_type=<span class="string">&quot;azure&quot;</span>,  </span><br><span class="line">            api_version=<span class="string">&#x27;2023-05-15&#x27;</span>,  </span><br><span class="line">            stop=[<span class="string">&quot;&lt;|im_end|&gt;&quot;</span>])</span><br></pre></td></tr></table></figure><p>使用这种方法，我们就可以在一个程序里面同时使用多个GPT账号了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;相信很多同学或多或少都在Python中使用过GPT API，通过Python安装&lt;code&gt;openai&lt;/code&gt;库，来调用GPT模型。&lt;/p&gt;
&lt;p&gt;OpenAI官方文档中给出了一个示例，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230903093758.png&quot;&gt;&lt;br&gt;如果你只有一个API账号，那么你可能不觉得这样写有什么问题。但如果你想同时使用两个账号怎么办？&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
    <category term="ChatGPT" scheme="https://www.kingname.info/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：从PDF完美提取表格</title>
    <link href="https://www.kingname.info/2023/09/03/extract-table-from-pdf/"/>
    <id>https://www.kingname.info/2023/09/03/extract-table-from-pdf/</id>
    <published>2023-09-03T01:31:41.000Z</published>
    <updated>2023-09-03T01:32:16.898Z</updated>
    
    <content type="html"><![CDATA[<p>在之前很长一段时间，从PDF文件中提取表格都是一个老大难的问题。无论你使用的是PyPDF2还是其他什么第三方库，提取出来的表格都会变成纯文本，难以二次利用。</p><p>但现在好消息来了，专业处理PDF的第三方库<code>PyMuPDF</code>升级到了1.23.0，已经支持完美提取PDF中的表格了。还可以把表格转换为Pandas的DataFrame供你分析。</p><span id="more"></span><p><code>PyMuPDF</code>的使用非常简单，首先我们来安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymupdf pandas openpyxl</span><br></pre></td></tr></table></figure><p>其中安装<code>pandas</code>是为了能让它转成DataFrame，安装<code>openpyxl</code>是为了能把结果导出为Excel。</p><p>我们来看一个测试的PDF文件，如下图所示：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230831221415.png"></p><p>其中表格在第5页，那么我们编写如下代码，读取第五页的表格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fitz</span><br><span class="line"></span><br><span class="line">doc = fitz.<span class="built_in">open</span>(<span class="string">&#x27;example.pdf&#x27;</span>)</span><br><span class="line">page = doc[<span class="number">4</span>] <span class="comment"># 下标从0开始,第五页对应4</span></span><br><span class="line">tables = page.find_tables()</span><br><span class="line">df = tables[<span class="number">0</span>].to_pandas()</span><br><span class="line">df.to_excel(<span class="string">&#x27;table.xlsx&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>读取第5页的表格，把它转换为DataFrame，然后输出为Excel文件。</p><p>生成的Excel文件如下图所示，表格中的所有信息都完整读取，连换行符都能正常保留：</p><p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/20230831221646.png"></p><p>当然你也可以不输出成Excel，而是直接在代码里面对DataFrame进行分析。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在之前很长一段时间，从PDF文件中提取表格都是一个老大难的问题。无论你使用的是PyPDF2还是其他什么第三方库，提取出来的表格都会变成纯文本，难以二次利用。&lt;/p&gt;
&lt;p&gt;但现在好消息来了，专业处理PDF的第三方库&lt;code&gt;PyMuPDF&lt;/code&gt;升级到了1.23.0，已经支持完美提取PDF中的表格了。还可以把表格转换为Pandas的DataFrame供你分析。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://www.kingname.info/tags/Python/"/>
    
    <category term="PDF" scheme="https://www.kingname.info/tags/PDF/"/>
    
  </entry>
  
  <entry>
    <title>一日一技：在Scrapy中如何拼接URL Query参数？</title>
    <link href="https://www.kingname.info/2023/08/27/scrapy-params/"/>
    <id>https://www.kingname.info/2023/08/27/scrapy-params/</id>
    <published>2023-08-27T13:45:55.000Z</published>
    <updated>2023-08-27T13:47:14.365Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，在使用Requests发起GET请求时，可以通过<code>params</code>参数来传递URL参数，让Requests在背后帮你把URL拼接完整。例如下面这段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实际需要请求的url参数为：</span></span><br><span class="line"><span class="comment"># https://www.kingname.info/article?id=1&amp;doc=2&amp;xx=3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line"><span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;doc&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;xx&#x27;</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">&#x27;https://www.kingname.info/article&#x27;</span>, params=params)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么在Scrapy中，发起GET请求时，应该怎么写才能实现这种效果呢？</p><span id="more"></span><p>我知道很多同学是通过字符串的format操作来拼接URL的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">url_template = <span class="string">&#x27;https://www.kingname.info/article?id=&#123;id&#125;&amp;doc=&#123;doc&#125;&amp;xx=&#123;xx&#125;&#x27;</span></span><br><span class="line">params = &#123;</span><br><span class="line"><span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;doc&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;xx&#x27;</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = url_template.<span class="built_in">format</span>(**params)</span><br></pre></td></tr></table></figure><p>但实际上，Scrapy的<code>FormRequest</code>不仅能用来发起POST请求，还可以在GET请求的时候用来拼接参数。它的写法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line"><span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;doc&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;xx&#x27;</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span> scrapy.FormRequest(<span class="string">&#x27;https://www.kingname.info/article&#x27;</span>, formdata=params, method=<span class="string">&#x27;GET&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这只是一个小技巧。大家可以自由选择是使用这种方法还是使用字符串的format填充。</p><p>不过话说回来，我想起以前遇到过一个网站，他们的反爬虫方法非常巧妙。</p><p>在正常情况下URL的参数顺序是没有任何关系的，什么顺序都可以。但这个网站反爬虫的机制，其中一个环节会判断这些参数在URL中的顺序。例如写成<code>https://www.kingname.info/article?id=1&amp;doc=2&amp;xx=3</code>就一切正常，但写成<code>https://www.kingname.info/article?doc=2&amp;id=1&amp;xx=3</code>就无法访问。当我们无论使用Requests的params参数，还是使用Scrapy的<code>FormRequest</code>参数，它自动组装的参数一般都是字典序，会按参数的首字母顺序排序。但这个网站需要的参数顺序刚好不是字典序，于是网站就会发现你。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们知道，在使用Requests发起GET请求时，可以通过&lt;code&gt;params&lt;/code&gt;参数来传递URL参数，让Requests在背后帮你把URL拼接完整。例如下面这段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 实际需要请求的url参数为：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# https://www.kingname.info/article?id=1&amp;amp;doc=2&amp;amp;xx=3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;params = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;#x27;doc&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;#x27;xx&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requests.get(&lt;span class=&quot;string&quot;&gt;&amp;#x27;https://www.kingname.info/article&amp;#x27;&lt;/span&gt;, params=params)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么在Scrapy中，发起GET请求时，应该怎么写才能实现这种效果呢？&lt;/p&gt;</summary>
    
    
    
    
    <category term="爬虫" scheme="https://www.kingname.info/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="Scrapy" scheme="https://www.kingname.info/tags/Scrapy/"/>
    
  </entry>
  
</feed>
